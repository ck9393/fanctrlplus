#!/bin/bash
# FanCtrlPlus: 自动控制 PWM 风扇脚本

plugin=fanctrlplus
cfg_path="/boot/config/plugins/$plugin"
log_tag="fanctrlplus"

log() {
  logger -t "$log_tag" "$1"
}

get_fan_path() {
  local pwm="$1"
  if [[ "$pwm" =~ pwm([0-9]+)$ ]]; then
    local i="${BASH_REMATCH[1]}"
    local dir="$(dirname "$pwm")"
    echo "$dir/fan${i}_input"
  else
    echo ""
  fi
}

calculate_pwm() {
  local temp=$1 low=$2 high=$3 min=$4
  if (( temp <= low )); then
    echo "$min"
  elif (( temp >= high )); then
    echo 255
  else
    local range=$((high - low))
    local delta=$((temp - low))
    echo $((min + delta * (255 - min) / range))
  fi
}

fanctrlplus.start() {
  pkill -f fanctrlplus_loop.sh 2>/dev/null

  for cfg in "$cfg_path"/fanctrlplus_*.cfg; do
    source "$cfg"
    [[ "$service" != "1" ]] && continue
    fan=$(get_fan_path "$controller")
    [[ ! -f "$controller" || ! -f "$fan" ]] && continue

    tag="${custom:-Fan_${controller##*/}}"
    log "[$tag] Daemon started"

    (
      exec -a fanctrlplus_loop.sh /bin/bash
      while true; do
        max_temp=0
        IFS=',' read -ra list <<< "$disks"
        for d in "${list[@]}"; do
          dev="/dev/disk/by-id/$d"
          real=$(realpath "$dev" 2>/dev/null) || continue
          [[ ! -b "$real" ]] && continue
          smartctl -n standby -A "$real" | grep -q "STANDBY" && continue

          if [[ "$real" == /dev/nvme* ]]; then
            t=$(smartctl -A "$real" | awk '/Temperature:/ {print $2; exit}')
          else
            t=$(smartctl -A "$real" | awk '/^194|Temperature_Celsius/ {print $10; exit}')
          fi
          [[ "$t" =~ ^[0-9]+$ ]] && (( t > max_temp )) && max_temp=$t
        done

        pwm_val=$(calculate_pwm "$max_temp" "$low" "$high" "$pwm")
        echo 1 > "${controller}_enable" 2>/dev/null
        echo "$pwm_val" > "$controller"
        sleep 4
        rpm=$(cat "$fan" 2>/dev/null || echo 0)
        log "[$tag] Temp=${max_temp}°C → PWM=$pwm_val → RPM=$rpm"
        sleep $((interval * 60))
      done
    ) &
  done
}

fanctrlplus.stop() {
  for cfg in "$cfg_path"/fanctrlplus_*.cfg; do
    source "$cfg"
    [[ "$service" != "1" ]] && continue
    tag="${custom:-Fan_${controller##*/}}"
    log "[$tag] Daemon stopped"
  done
  pkill -f fanctrlplus_loop.sh
}

case "$1" in
  start) fanctrlplus.start ;;
  stop) fanctrlplus.stop ;;
  restart) fanctrlplus.stop; sleep 2; fanctrlplus.start ;;
  *) echo "Usage: $0 {start|stop|restart}" ;;
esac

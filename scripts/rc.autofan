#!/bin/bash
#=======================================================================================
#  FanCtrlPlus 控制脚本：自动侦测 fan、以 disks include 模式控制 PWM 风扇
#=======================================================================================
plugin=fanctrlplus
cfg_path="/boot/config/plugins/$plugin"
script_name="$(basename "$0")"
running_tag="fanctrlplus_loop"

log() {
  logger -t fanctrlplus "$1"
}

get_fan_path() {
  local pwm_path="$1"
  if [[ "$pwm_path" =~ pwm([0-9]+)$ ]]; then
    local idx="${BASH_REMATCH[1]}"
    local base_dir="$(dirname "$pwm_path")"
    local fan_path="$base_dir/fan${idx}_input"
    [[ -e "$fan_path" ]] && echo "$fan_path" || echo ""
  else
    echo ""
  fi
}

read_temp() {
  local disk="$1"
  local dev="/dev/disk/by-id/$disk"
  local path=$(realpath "$dev")
  [[ ! -b "$path" ]] && return
  if smartctl -n standby -A "$path" 2>&1 | grep -q "Device is in STANDBY"; then
    return
  fi
  if [[ "$path" == /dev/nvme* ]]; then
    smartctl -A "$path" | awk '/Temperature:/ {print $2; exit}'
  else
    smartctl -A "$path" | awk '/^194|Temperature_Celsius/ {print $10; exit}'
  fi
}

calculate_pwm() {
  local temp="$1" low="$2" high="$3" min_pwm="$4"
  if (( temp <= low )); then
    echo "$min_pwm"
  elif (( temp >= high )); then
    echo 255
  else
    local range=$((high - low))
    local delta=$((temp - low))
    echo $((min_pwm + delta * (255 - min_pwm) / range))
  fi
}

fanctrlplus.start() {
  fanctrlplus.stop  # 停止旧任务

  for cfg in "$cfg_path"/${plugin}_*.cfg; do
    source "$cfg"
    [[ "$service" != "1" ]] && continue

    fan=""
    if [[ -z "$fan" && -n "$controller" ]]; then
      fan=$(get_fan_path "$controller")
    fi
    [[ ! -f "$controller" || ! -f "$fan" ]] && log "Skip: invalid controller [$controller] or fan [$fan]" && continue

    tag_name="${name:-${controller##*/}}"
    fan_tag="FanCtrl_${tag_name} → ${fan##*/}"
    prev_pwm=-1

    log "[$fan_tag] Started PWM control"

    (
      while true; do
        IFS=',' read -ra disks_list <<< "$disks"
        max_temp=0

        for disk in "${disks_list[@]}"; do
          temp=$(read_temp "$disk")
          [[ "$temp" =~ ^[0-9]+$ ]] && (( temp > max_temp )) && max_temp=$temp
        done

        pwm_val=$(calculate_pwm "$max_temp" "$low" "$high" "$pwm")

        if [[ "$prev_pwm" == -1 || $(( pwm_val - prev_pwm >= 5 || prev_pwm - pwm_val >= 5 )) == 1 ]]; then
          echo "$pwm_val" > "$controller"
          sleep 4
          rpm=$(cat "$fan" 2>/dev/null || echo 0)
          log "[$fan_tag] MaxTemp=${max_temp}°C → PWM=$pwm_val → FanRPM=$rpm"
          prev_pwm="$pwm_val"
        fi

        sleep "$((interval * 60))"
      done
    ) & disown
  done
}

fanctrlplus.stop() {
  pkill -f "$running_tag" 2>/dev/null
  for cfg in "$cfg_path"/${plugin}_*.cfg; do
    source "$cfg"
    [[ -n "$controller" ]] && echo 255 > "$controller"
  done
  echo "$script_name stopped"
}

fanctrlplus.speed() {
  for cfg in "$cfg_path"/${plugin}_*.cfg; do
    source "$cfg"
    [[ -f "$controller" && $(cat "$fan" 2>/dev/null) -gt 0 ]] && \
      echo -n "$(( $(cat "$controller") * 100 / 255 )) " || echo -n "0 "
  done
}

fanctrlplus.restart() {
  fanctrlplus.stop
  sleep 1
  fanctrlplus.start
}

case "$1" in
  'start')   fanctrlplus.start ;;
  'stop')    fanctrlplus.stop ;;
  'speed')   fanctrlplus.speed ;;
  'restart') fanctrlplus.restart ;;
  *)         echo "Usage: $script_name start|stop|restart|speed" ;;
esac

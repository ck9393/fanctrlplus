#!/bin/bash
# FanCtrlPlus: 自动控制 PWM 风扇脚本

plugin=fanctrlplus
cfg_path="/boot/config/plugins/$plugin"
script_name="$(basename "$0")"
log_tag="fanctrlplus"

log() {
  logger -t "$log_tag" "$1"
}

get_fan_path() {
  local pwm_path="$1"
  if [[ "$pwm_path" =~ pwm([0-9]+)$ ]]; then
    local idx="${BASH_REMATCH[1]}"
    local base_dir="$(dirname "$pwm_path")"
    local fan_path="$base_dir/fan${idx}_input"
    [[ -e "$fan_path" ]] && echo "$fan_path" || echo ""
  else
    echo ""
  fi
}

read_temp() {
  local disk="$1"
  local dev="/dev/disk/by-id/$disk"
  local path
  path=$(realpath "$dev" 2>/dev/null) || return
  [[ ! -b "$path" ]] && return
  smartctl -n standby -A "$path" 2>&1 | grep -q "Device is in STANDBY" && return
  if [[ "$path" == /dev/nvme* ]]; then
    smartctl -A "$path" | awk '/Temperature:/ {print $2; exit}'
  else
    smartctl -A "$path" | awk '/^194|Temperature_Celsius/ {print $10; exit}'
  fi
}

calculate_pwm() {
  local temp="$1" low="$2" high="$3" min_pwm="$4"
  if (( temp <= low )); then
    echo "$min_pwm"
  elif (( temp >= high )); then
    echo 255
  else
    local range=$((high - low))
    local delta=$((temp - low))
    echo $((min_pwm + delta * (255 - min_pwm) / range))
  fi
}

fanctrlplus.start() {
  if pgrep -f fanctrlplus_loop > /dev/null; then
    echo "fanctrlplus already running"
    exit 0
  fi

  for cfg in "$cfg_path"/${plugin}_*.cfg; do
    source "$cfg"
    [[ "$service" != "1" ]] && continue

    fan=$(get_fan_path "$controller")
    if [[ -z "$fan" || ! -f "$controller" || ! -f "$fan" ]]; then
      log "跳过无效设置: controller=$controller fan=$fan"
      continue
    fi

    # 标签（用于日志）
    tag="${custom:-FanCtrl_${controller##*/}}"

    log "[$tag] 启动 PWM 控制"

    (
      prev_pwm=-1
      while true; do
        IFS=',' read -ra disks_list <<< "$disks"
        max_temp=0

        for disk in "${disks_list[@]}"; do
          temp=$(read_temp "$disk")
          [[ "$temp" =~ ^[0-9]+$ ]] && (( temp > max_temp )) && max_temp=$temp
        done

        pwm_val=$(calculate_pwm "$max_temp" "$low" "$high" "$pwm")

        if [[ "$prev_pwm" == -1 || $(( pwm_val - prev_pwm >= 5 || prev_pwm - pwm_val >= 5 )) == 1 ]]; then
          enable_file="${controller}_enable"
          [[ -f "$enable_file" ]] && echo 1 > "$enable_file"
          echo "$pwm_val" > "$controller"
          sleep 4
          rpm=$(cat "$fan" 2>/dev/null || echo 0)
          log "[$tag] Temp=${max_temp}°C → PWM=$pwm_val → RPM=$rpm"
          prev_pwm="$pwm_val"
        fi

        sleep "$((interval * 60))"
      done
    ) & disown
  done
}

fanctrlplus.stop() {
  pkill -f "/usr/local/emhttp/plugins/$plugin/scripts/$script_name"
  for cfg in "$cfg_path"/${plugin}_*.cfg; do
    source "$cfg"
    [[ -n "$controller" ]] && echo 255 > "$controller"
  done
  log "已停止 fanctrlplus"
}

fanctrlplus.speed() {
  for cfg in "$cfg_path"/${plugin}_*.cfg; do
    source "$cfg"
    percent=0
    if [[ -f "$controller" ]]; then
      val=$(cat "$controller")
      percent=$(( val * 100 / 255 ))
    fi
    echo "$controller: $percent%"
  done
}

fanctrlplus.restart() {
  fanctrlplus.stop
  sleep 2
  fanctrlplus.start
}

case "$1" in
  start) fanctrlplus.start ;;
  stop) fanctrlplus.stop ;;
  restart) fanctrlplus.restart ;;
  speed) fanctrlplus.speed ;;
  *) echo "Usage: $0 {start|stop|restart|speed}" ;;
esac

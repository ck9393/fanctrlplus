Menu="Utilities"
Title="FanCtrl Plus"
Icon="fanctrlplus.png"
---

<?PHP
$plugin = "fanctrlplus";
$cfg_dir = "/boot/config/plugins/$plugin";
$order_file = "$cfg_dir/order.json";

require_once "$docroot/plugins/$plugin/include/Common.php";

// 初始化目录
if (!is_dir($cfg_dir)) {
  mkdir($cfg_dir, 0777, true);
}

$cfg_files = glob("$cfg_dir/{$plugin}_*.cfg");

$order_file = "$cfg_dir/order.cfg";
$order = [];

if (file_exists($order_file)) {
  $ini = parse_ini_file($order_file);
  $order = array_values($ini);  // 提取 order1=xxx 的值
  $order = array_filter($order, function($f) {
    return strpos($f, '_temp_') === false;
  });
}

// 1. 按 order.cfg 顺序加载
foreach ($order as $file) {
  $path = "$cfg_dir/$file";
  if (is_file($path)) {
    $cfg = parse_ini_file($path);
    $cfg['file'] = $file;
    $all_cfg[] = $cfg;
  }
}

// 2. 加载未出现在 order.cfg 的正式 cfg
$seen = array_flip($order);
foreach ($cfg_files as $path) {
  $basename = basename($path);
  if (!isset($seen[$basename]) && strpos($basename, '_temp_') === false) {
    $cfg = parse_ini_file($path);
    $cfg['file'] = $basename;
    $all_cfg[] = $cfg;
  }
}

// 3. 加载 temp_x.cfg
foreach ($cfg_files as $path) {
  $basename = basename($path);
  if (strpos($basename, '_temp_') !== false) {
    $cfg = parse_ini_file($path);
    $cfg['file'] = $basename;
    $all_cfg[] = $cfg;
  }
}

// 若仍为空（没有 cfg），就生成第一个 temp
if (empty($all_cfg)) {
  $temp_file = "$cfg_dir/{$plugin}_temp_0.cfg";
  if (!file_exists($temp_file)) {
    file_put_contents($temp_file, "custom=\"\"\nservice=\"1\"\ncontroller=\"\"\npwm=\"100\"\nlow=\"40\"\nhigh=\"60\"\ninterval=\"2\"\ndisks=\"\"");
  }
  $all_cfg[] = parse_ini_file($temp_file) + ['file' => basename($temp_file)];
}

$pwms = list_pwm();
$disks = list_valid_disks_by_id();
$width = 300;
?>

<style>
:root {
  --frame-color: #000000;
  --hub-color: #666666;
}
@media (prefers-color-scheme: dark) {
  :root {
    --frame-color: #ffffff;
    --hub-color: #cccccc;
  }
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to   { transform: rotate(360deg); }
}

.rotating {
  animation-name: spin;
  animation-duration: 1.2s;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  transform-origin: 50% 50%;
}

.frame, .hub {
    transition: fill 0.3s ease;
}

.fanctrl-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0px 70px 0 8px;
}

.fanctrl-indicator-container {
  display: flex;
  align-items: center;
  gap: 8px;
}

.fanctrl-label {
  font-size: 13px;
  font-weight: 500;
  color: #00b300;
  min-width: 50px;
  text-align: left;
  transition: color 0.3s ease;
}

.fanctrl-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: #00b300;
  opacity: 0;
  transform: scale(0.8);
  transition: opacity 1s ease, transform 1s ease;
}

.fanctrl-dot.visible {
  opacity: 1;
  transform: scale(1.3);
}

.fanctrl-stopped .fanctrl-label {
  color: #cc0000;
}

.fanctrl-stopped .fanctrl-dot {
  background-color: #cc0000 !important;
  opacity: 1 !important;
  transform: scale(1) !important;
  transition: none !important;
}

.fanctrl-sort-toggle {
  font-size: 13px;
  background: transparent !important;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 0;
  box-shadow: none;
  /* 可适当加粗一点更醒目 */
}

#fan-area {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  gap: 0px 16px;
}
.fan-block {
  flex: 1 1 48%;
  min-width: 340px;
  max-width: 48%;
  margin-bottom: 0;
  vertical-align: top;
  box-sizing: border-box;
}
.fan-block.draggable { cursor: move !important; }
.fan-block.ui-sortable-helper { cursor: grabbing !important; }
</style>

<div class="fanctrl-header">
  <div class="fanctrl-indicator-container" id="fanctrl-indicator" title="Fan control status">
    <span class="fanctrl-label">Running</span>
    <div class="fanctrl-dot"></div>
    <div class="fanctrl-dot"></div>
    <div class="fanctrl-dot"></div>
  </div>
  <b id="fanctrlplus-sort-toggle"
     class="system icon-u-lock green-text fanctrl-sort-toggle"
     title="Unlock to rearrange fans"></b>
</div>

<script>
const DEBUG = false; // ✅ 设置是否开启调试输出

$(function() {
  // 跳动绿点动画
  let dotIndex = 0;
  const dotEls = document.querySelectorAll('#fanctrl-indicator .fanctrl-dot');
  dotEls.forEach(dot => dot.classList.remove('visible'));
  dotEls[dotIndex].classList.add('visible');
  function animateDots() {
    const container = document.getElementById('fanctrl-indicator');
    if (!container || container.classList.contains('fanctrl-stopped')) return;
    dotEls.forEach(dot => dot.classList.remove('visible'));
    dotIndex = (dotIndex + 1) % dotEls.length;
    dotEls[dotIndex].classList.add('visible');
  }
  setInterval(animateDots, 2000);

  // 初始化 SVG 风扇转动
  $('.fan-block svg[id^="fan-icon-"]').each(function() {
    const id = $(this).attr('id');
    updateRotorById(id, true);
  });

  function updateRotorById(fanId, isRunning = true) {
    const fanIcon = document.getElementById(fanId);
    if (!fanIcon) return;
    const rotor = fanIcon.querySelector('.rotor');
    if (rotor) rotor.classList.toggle('rotating', isRunning);

    const bg = getComputedStyle(document.body).backgroundColor;
    const match = bg.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/);
    const brightness = match ? (parseInt(match[1]) + parseInt(match[2]) + parseInt(match[3])) / 3 : 255;
    const isDark = brightness < 128;

    let frameColor, hubColor;
    if (isRunning) {
      frameColor = isDark ? '#ffffff' : '#000000';
      hubColor   = isDark ? '#cccccc' : '#666666';
    } else {
      frameColor = '#cc0000';
      hubColor   = '#ff6666';
    }
    const frame = fanIcon.querySelector('.frame');
    const hub   = fanIcon.querySelector('.hub');
    if (!frame || !hub) {
      setTimeout(() => updateRotorById(fanId, isRunning), 100);
      return;
    }
    frame.setAttribute('fill', frameColor);
    hub.setAttribute('fill', hubColor);
  }

  window.updateFanControlStatus = function(isRunning = null) {
    if (isRunning === null) {
      fetch("/plugins/fanctrlplus/include/FanctrlLogic.php?op=status")
        .then(res => res.text())
        .then(status => updateFanControlStatus(status.trim() === "running"));
      return;
    }
    const container = document.getElementById('fanctrl-indicator');
    const label = container.querySelector('.fanctrl-label');
    if (isRunning) {
      container.classList.remove('fanctrl-stopped');
      label.textContent = 'Running';
    } else {
      container.classList.add('fanctrl-stopped');
      label.textContent = 'Inactive';
    }
  };

  function updateStatusLightAndButton() {
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status'}, function(statusObj) {
      const isRunning = statusObj.status === 'running';
      updateFanControlStatus(isRunning);
      const btn = $('#toggle-daemon');
      btn.text(isRunning ? '⏹️ Stop' : '▶️ Start');
      btn.attr('title', isRunning ? 'Stop fan control.' : 'Start fan control.');
      btn.prop('disabled', false);
    }).fail(function(jqXHR, textStatus, errorThrown) {
      console.error("❌ Failed to load status:", textStatus, errorThrown);
    });
  }
  function updateAllFanStatus() {
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status_all'}, function(statusMap) {
      $('.fan-block').each(function(index) {
        const block = $(this);
        const input = block.find('input[name^="custom["]');
        if (!input.length) return;
        const name = input.val().trim();
        const matchedKey = Object.keys(statusMap).find(k => k.toLowerCase() === name.toLowerCase());
        const status = matchedKey ? statusMap[matchedKey] : 'stopped';
        const isRunning = status === 'running';
        const fanSvg = document.getElementById(`fan-icon-${index}`);
        if (!fanSvg) return;
        const rotor = fanSvg.querySelector('.rotor');
        const frame = fanSvg.querySelector('.frame');
        const hub   = fanSvg.querySelector('.hub');
        if (rotor) rotor.classList.toggle('rotating', isRunning);
        const bg = getComputedStyle(document.body).backgroundColor;
        const match = bg.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/);
        const brightness = match ? (parseInt(match[1]) + parseInt(match[2]) + parseInt(match[3])) / 3 : 255;
        const isDark = brightness < 128;
        const frameColor = isRunning ? (isDark ? '#ffffff' : '#000000') : '#cc0000';
        const hubColor   = isRunning ? (isDark ? '#cccccc' : '#666666') : '#ff6666';
        if (frame) frame.setAttribute('fill', frameColor);
        if (hub)   hub.setAttribute('fill', hubColor);
        const container = fanSvg.closest('.fan-svg-container');
        if (container) {
          container.title = `Fan control: ${isRunning ? 'Active (based on disk temperature)' : 'Inactive (not automatically controlled)'}`;
        }
      });
    }).fail(function(jqXHR, textStatus, errorThrown) {
      console.error("❌ Failed to load status_all:", textStatus, errorThrown);
    });
  }
  updateStatusLightAndButton();
  updateAllFanStatus();
  setInterval(function() {
    updateStatusLightAndButton();
    updateAllFanStatus();
  }, 30000);

  window.toggleDaemon = function() {
    const btn = $('#toggle-daemon');
    btn.prop('disabled', true);
    const action = btn.text().includes('Stop') ? 'stop' : 'start';
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: action}, function() {
      let tries = 0, maxTries = 10;
      const check = () => {
        $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status'}, function(data) {
          const isRunning = data.status === 'running';
          const wantRunning = action === 'start';
          if (isRunning === wantRunning || tries >= maxTries) {
            updateStatusLightAndButton();
            updateAllFanStatus();
            btn.prop('disabled', false);
          } else {
            tries++;
            setTimeout(check, 500);
          }
        });
      };
      check();
    }).fail(function(jqXHR, textStatus, errorThrown) {
      console.error("❌ Toggle daemon failed:", textStatus, errorThrown);
      btn.prop('disabled', false);
    });
  };

  window.pauseFan = function(pwm, btn) {
    if (!pwm || !btn) return;
    const $btn = $(btn);
    $btn.prop('disabled', true).text("Pausing...");
    $.ajax({
      url: '/plugins/fanctrlplus/include/FanctrlLogic.php',
      method: 'GET',
      data: {op: 'pause', pwm: pwm},
      timeout: 1000,
      success: function(data) {
        console.log("✅ Pause response:", data);
        let seconds = 30;
        const interval = setInterval(() => {
          if (seconds <= 0) {
            clearInterval(interval);
            $btn.text("Pause 30s").prop('disabled', false);
          } else {
            $btn.text(`Paused (${seconds}s)`);
            seconds--;
          }
        }, 1000);
      },
      error: function(xhr, status, err) {
        console.error("❌ Pause failed:", status, err);
        $btn.text("Pause 30s").prop('disabled', false);
      }
    });
  };

  window.addFan = function() {
    const index = $('.fan-block').length;
    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', {op:'newtemp', index: index}, function(html) {
      $('#fan-area').append(html);
      updateAllFanStatus();
      $('.disk-select').last().dropdownchecklist({
        emptyText:'(None)',
        width: <?=$width?>,
        explicitClose:'...close'
      });

    }, 'html').fail(function(jqXHR, textStatus, errorThrown) {
      alert("Failed to add fan.");
    });
  };

  $('.disk-select').each(function() {
    $(this).dropdownchecklist({emptyText:'(None)', width:<?=$width?>, explicitClose:'...close'});
  });

  $('form').on('change keyup', 'input, select, textarea', function() {
    $('form').trigger('ui:changed');
  });

  $('form').on('ui:changed', function() {
    $('input[name="#apply"]').prop('disabled', false);
  });

  function initOriginalForBlock($block) {
    const original = {
      custom: $block.find('input[name^="custom["]').val(),
      controller: $block.find('select[name^="controller["]').val(),
      pwm: $block.find('input[name^="pwm["]').val(),
      low: $block.find('input[name^="low["]').val(),
      high: $block.find('input[name^="high["]').val(),
      interval: $block.find('input[name^="interval["]').val(),
      disks: $block.find('select[name^="disks["]').val()
    };
    $block.data('original', original);
  }

  function setApplyAllButtonState() {
    let dirty = false;

    $('.fan-block').each(function () {
      const $block = $(this);
      const original = $block.data('original');
      const current = {
        custom: $block.find('input[name^="custom["]').val(),
        controller: $block.find('select[name^="controller["]').val(),
        pwm: $block.find('input[name^="pwm["]').val(),
        low: $block.find('input[name^="low["]').val(),
        high: $block.find('input[name^="high["]').val(),
        interval: $block.find('input[name^="interval["]').val(),
        disks: $block.find('select[name^="disks["]').val()
      };
      if (JSON.stringify(original) !== JSON.stringify(current)) {
        dirty = true;
      }
    });

    $('input[name="#apply"]').prop('disabled', !dirty);
  }

  // ✅ 页面加载完成后初始化
  $(document).ready(function () {
    $('.fan-block').each(function () {
      initOriginalForBlock($(this));
    });

    $('input, select').on('input change', function () {
      setApplyAllButtonState();
    });

    setApplyAllButtonState();
  });

  
  $(document).on('click', '.delete-btn', function () {
    const block = $(this).closest('.fan-block');
    const file = block.data('file') || block.find('input.cfg-file').val();
    const custom = block.find('input[name^="custom["]').val() || '';
    const msg = custom
      ? `Are you sure you want to delete "${custom}"?`
      : `Are you sure you want to delete this fan configuration?`;
    if (!confirm(msg)) return;
    const isTemp = file.includes('_temp_');
    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', {op:'delete', file: file})
      .done(function(result) {
        block.remove();
        if (!isTemp) {
          // 加入延迟：300ms 后再执行 saveFanOrder()
          setTimeout(() => {
            let order = [];
            $('.fan-block').each(function() {
              const val = $(this).find('input.cfg-file').val();
              if (val && !val.includes('_temp_')) order.push(val);
            });
            saveFanOrder(order);
          }, 300);  // 延迟 300ms，确保 block.remove() 完全生效
        }
        setTimeout(() => updateAllFanStatus(), 500);
      });
  });

  $('#fan-form').on('submit', function(e) {
    let valid = true;
    let errorMsg = '';

    $('.custom-name-input').each(function() {
      const name = $(this).val().trim();
      if (name === '') {
        valid = false;
        errorMsg = 'Custom Name is required.';
        return false;
      }
      if (!/^[A-Za-z0-9_]+$/.test(name)) {
        valid = false;
        errorMsg = 'Custom Name can only contain letters, numbers, and underscores.';
        return false;
      }
    });

    if (!valid) {
      alert(errorMsg);
      e.preventDefault(); // 拦截提交
      return false;
    }
  });

  // 手动刷新单独风扇的事件（用原生方式也能放进来）
  document.body.addEventListener('click', function(e) {
    const btn = e.target.closest('.fanctrlplus-interval-refresh');
    if (!btn) return;
    const icon = btn.querySelector('.fa');
    btn.style.color = '#aaa';
    if (icon) icon.classList.add('fa-spin');
    const label = btn.getAttribute('data-label');
    if (!label) {
      alert("Custom Name is not configured, cannot refresh!");
      return;
    }
    btn.style.pointerEvents = 'none';
    fetch(`/plugins/fanctrlplus/include/FanctrlLogic.php?op=refresh_single&custom=${encodeURIComponent(label)}`)
      .then(res => {
        if (!res.ok) throw new Error("Request failed");
        return res.text();
      })
      .then(() => setTimeout(() => {
        if (icon) icon.classList.remove('fa-spin');
        btn.style.color = 'var(--blue-800)';
        btn.style.pointerEvents = '';
      }, 1800))
      .catch(err => {
        btn.style.color = 'var(--blue-800)';
        if (icon) icon.classList.remove('fa-spin');
        btn.style.pointerEvents = '';
        alert("Manual Run failed: " + err.message);
      });
    e.preventDefault();
    e.stopPropagation();
  });

  // 风扇排序
  let sortableUnlocked = false;

  $(function () {
    // 初始化 sortable 区域，只做一次
    $("#fan-area").sortable({
      items: ".fan-block",
      opacity: 0.6,
      disabled: true,
      tolerance: "pointer",
      helper: "original"
    });
  });

  // 切换解锁按钮逻辑
  $('#fanctrlplus-sort-toggle').on('click', function () {
    // 如果当前是锁定状态，准备解锁
    if (!sortableUnlocked) {
      if ($('.fan-block[data-file*="_temp_"]').length > 0) {
        alert("Temporary fan configurations found. Please name them or delete before unlocking.");
        return;
      }
    }

    // 切换排序状态
    sortableUnlocked = !sortableUnlocked;
    $("#fan-area").sortable("option", "disabled", !sortableUnlocked);

    if (sortableUnlocked) {
      // 解锁：启用拖动
      $('.fan-block').addClass('draggable');
      $(this)
        .removeClass('icon-u-lock green-text')
        .addClass('icon-u-lock-open red-text')
        .attr('title', 'Lock sorting fan configurations');
    } else {
      // 锁回：禁用拖动 + 保存排序
      $('.fan-block').removeClass('draggable');
      $(this)
        .removeClass('icon-u-lock-open red-text')
        .addClass('icon-u-lock green-text')
        .attr('title', 'Unlock sorting fan configurations');

      // 等 DOM 顺序更新完，执行保存
      setTimeout(() => {
        saveFanOrder();
      }, 300);
    }
  });

  // 保存排序的函数（用于锁回时调用）
  function saveFanOrder() {
    const order = [];

    $('.fan-block').each(function () {
      const val = $(this).find('input.cfg-file').val();
      if (typeof val === 'string' && val.trim() !== '') {
        order.push(val.trim());
      }
    });

    console.log("saveFanOrder triggered, final order:", order);

    if (order.length > 0) {
      $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', {
        op: 'saveorder',
        order: order
      }).done(function () {
        console.log("POST /saveorder success");
      }).fail(function (jqXHR, textStatus, errorThrown) {
        console.warn("Failed to save order.cfg:", textStatus, errorThrown);
      });
    } else {
      console.warn("No valid .cfg-file found, nothing to save");
    }
  }
});  
</script>

<form id="fan-form" method="POST" action="/update.php" target="progressFrame">
  <input type="hidden" name="#include" value="plugins/fanctrlplus/include/update.fanctrlplus.php">
  <div id="fan-area">
    <?php
    require_once "$docroot/plugins/$plugin/include/FanBlockRender.php";
    foreach ($all_cfg as $i => $cfg) {
      echo render_fan_block($cfg, $i, $pwms, $disks);
    }
    ?>
  </div>
  <div style="clear:both; margin-top:15px; text-align: left;">
    <button type="button" onclick="addFan()" title="Add a new fan configuration">➕ Add Fan</button>
    <input type="submit" name="#apply" value="Apply All" title="Save all fan configurations">
    <button type="button" id="toggle-daemon" onclick="toggleDaemon()" disabled>Loading...</button>
  </div>
</form>
Menu="Utilities"
Title="FanCtrl Plus"
Icon="fanctrlplus.png"
---

<?PHP
$plugin = "fanctrlplus";
$cfg_dir = "/boot/config/plugins/$plugin";

require_once "$docroot/plugins/$plugin/include/Common.php";

// 初始化配置
if (!is_dir($cfg_dir)) {
  mkdir($cfg_dir, 0777, true);
}

$all_cfg = [];
foreach (glob("$cfg_dir/{$plugin}_*.cfg") as $file) {
  $cfg = parse_ini_file($file);
  $cfg['file'] = basename($file);
  $all_cfg[] = $cfg;
}

if (empty($all_cfg)) {
  $temp_file = "$cfg_dir/{$plugin}_temp_0.cfg";
  if (!file_exists($temp_file)) {
    file_put_contents($temp_file, "custom=\"\"\nservice=\"1\"\ncontroller=\"\"\npwm=\"100\"\nlow=\"40\"\nhigh=\"60\"\ninterval=\"2\"\ndisks=\"\"");
  }
  $all_cfg[] = parse_ini_file($temp_file) + ['file' => basename($temp_file)];
}

$pwms = list_pwm();
$disks = list_valid_disks_by_id();
$width = 300;
?>

<p style="margin: 4px 0 12px 12px; font-size:13px; font-weight:normal;">
  <span style="font-weight:bold;">Fan Control:</span>
  <span id="status-value" style="color:green;">Active</span>
</p>

<script>
$(function() {
  function updateFanControlStatus(isRunning) {
    const statusElem = document.getElementById('status-value');
    if (!statusElem) return;
    statusElem.textContent = isRunning ? 'Active' : 'Inactive';
    statusElem.style.color = isRunning ? 'green' : 'red';
  }

  function updateStatusLightAndButton() {
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status'}, function(statusObj) {
      const isRunning = statusObj.status === 'running';
      updateFanControlStatus(isRunning);

      const btn = $('#toggle-daemon');
      btn.text(isRunning ? '⏹️ Stop' : '▶️ Start');
      btn.attr('title', isRunning ? 'Stop fan control.' : 'Start fan control.'); 
      btn.prop('disabled', false);
    }).fail(function(jqXHR, textStatus, errorThrown) {
      console.error("❌ Failed to load status:", textStatus, errorThrown);
    });
  }

  function updateAllFanStatus() {
    console.log("✅ updateAllFanStatus triggered");
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status_all'}, function(statusMap) {
      console.log("✅ statusMap:", statusMap);

      $('.fan-block').each(function() {
        const block = $(this);
        const name = block.find('input[name^="custom["]').val().trim();
        const indicator = block.find('.fan-status');

        console.log("→ block:", name, "indicator exists:", indicator.length > 0);

        if (!indicator.length) return;

        const matchedKey = Object.keys(statusMap).find(k => k.toLowerCase() === name.toLowerCase());
        const status = matchedKey ? statusMap[matchedKey] : 'stopped';

        console.log("→ matchedKey:", matchedKey, "status:", status);

        indicator.text(status === 'running' ? '🟢' : '🔴');
      });
    }).fail(function(jqXHR, textStatus, errorThrown) {
      console.error("❌ Failed to load status_all:", textStatus, errorThrown);
    });
  }
  updateStatusLightAndButton();
  updateAllFanStatus();

  setInterval(function() {
    updateStatusLightAndButton();
    updateAllFanStatus();
  }, 30000);

  window.toggleDaemon = function() {
    const btn = $('#toggle-daemon');
    btn.prop('disabled', true);
    const action = btn.text().includes('Stop') ? 'stop' : 'start';

    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: action}, function() {
      // 每 500ms 检查一次，最多等 10 次（5 秒）
      let tries = 0;
      const maxTries = 10;

      const check = () => {
        $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status'}, function(data) {
          const isRunning = data.status === 'running';
          const wantRunning = action === 'start';

          if (isRunning === wantRunning || tries >= maxTries) {
            updateStatusLightAndButton();
            updateAllFanStatus();
            btn.prop('disabled', false);
          } else {
            tries++;
            setTimeout(check, 500);
          }
        });
      };

    check();
  }).fail(function(jqXHR, textStatus, errorThrown) {
    console.error("❌ Toggle daemon failed:", textStatus, errorThrown);
    btn.prop('disabled', false);
  });
};

  window.pauseFan = function(pwm, btn) {
    $(btn).prop('disabled', true).text("Pausing...");
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op:'pause', pwm:pwm}, function() {
      let seconds = 30;
      let interval = setInterval(function() {
        if (seconds <= 0) {
          clearInterval(interval);
          $(btn).text("Pause 30s").prop('disabled', false);
        } else {
          $(btn).text("Paused (" + seconds + "s)");
          seconds--;
        }
      }, 1000);
    });
  };

  window.removeFan = function(btn) {
    if (!confirm("Are you sure you want to delete this fan configuration?")) return;
    const block = $(btn).closest('.fan-block');
    const file = block.find('input.cfg-file').val();

    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', {op:'delete', file: file})
      .done(function(result) {
        console.log("✅ Fan deleted:", result);
        block.remove();                  // ✅ 先从页面移除
        setTimeout(() => {
          updateAllFanStatus();         // ✅ 然后刷新 status 灯
        }, 500);
      })
      .fail(function(jqXHR, textStatus, errorThrown) {
        console.error("❌ Delete fan failed:", textStatus, errorThrown);
        alert("Failed to delete fan.");
      });
  };

  window.addFan = function() {
    console.log("🟡 Add Fan clicked");
    const index = $('.fan-block').length;
  
    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', {op:'newtemp', index: index}, function(html) {
      console.log("🟢 Fan HTML received");
      $('#fan-area').append(html);
      updateAllFanStatus();
      $('.disk-select').last().dropdownchecklist({
        emptyText:'(None)',
        width: <?=$width?>,
        explicitClose:'...close'
      });
    }, 'html')  // ✅ 指定 HTML 返回类型，避免 JSON.parse 报错
    .fail(function(jqXHR, textStatus, errorThrown) {
      console.error("🔴 Add fan failed:", textStatus, errorThrown);
      alert("Failed to add fan.");
    });
  };

  $('.disk-select').each(function() {
    $(this).dropdownchecklist({emptyText:'(None)', width:<?=$width?>, explicitClose:'...close'});
  });

  $('form input, form select, form textarea').on('change keyup', function() {
    $('form').trigger('ui:changed');
  });

  $('form').on('submit', function() {
    let valid = true;
    $('input[name^="custom["]').each(function() {
      if ($(this).val().trim() === '') {
        alert("Custom Name cannot be empty!");
        $(this).focus();
        valid = false;
        return false;
      }
    });
    return valid;
  });
});
</script>

<form method="POST" action="/update.php" target="progressFrame">
  <input type="hidden" name="#include" value="plugins/fanctrlplus/include/update.fanctrlplus.php">
  <div id="fan-area">
    <?php
    require_once "$docroot/plugins/$plugin/include/FanBlockRender.php";
    foreach ($all_cfg as $i => $cfg) {
      echo render_fan_block($cfg, $i, $pwms, $disks);
    }
    ?>
  </div>
    <div style="clear:both; margin-top:15px; text-align: left;">
      <button type="button" onclick="addFan()" title="Add a new fan controller block">➕ Add Fan</button>
      <input type="submit" name="#apply" value="Apply All" title="Save all fan configurations">
      <button type="button" id="toggle-daemon" onclick="toggleDaemon()" disabled>Loading...</button>
    </div>
</form>

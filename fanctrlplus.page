Menu="Utilities"
Title="FanCtrl Plus"
Icon="fanctrlplus.png"
---
<?php
echo <<<HTML
<link rel="stylesheet" href="/plugins/fanctrlplus/fonts/style.css">
<link rel="stylesheet" type="text/css" href="/webGui/styles/jquery.switchbutton.css">
<link rel="stylesheet" href="/plugins/fanctrlplus/css/sweetalert2.min.css">
<link rel="stylesheet" href="/plugins/fanctrlplus/css/fcp.base.css?v=1.3.1a">
<script src="/plugins/fanctrlplus/js/sweetalert2.min.js"></script>
<script src="/plugins/fanctrlplus/js/chart.min.js"></script>
<script src="/plugins/fanctrlplus/include/chart-handler.js"></script>
HTML;
?>

<script>
  window.addEventListener('DOMContentLoaded', () => {
    const titleDiv = document.querySelector('div.title > span.left');
    if (titleDiv) {
      titleDiv.innerHTML = `
        <i class="icon-fanctrlplus" style="font-size:20px; vertical-align:middle;"></i>
        <span style="margin-left:8px; vertical-align:middle;">FanCtrl Plus Configuration</span>`;
    }
  });
</script>

<?PHP
$plugin = "fanctrlplus";
$cfg_dir = "/boot/config/plugins/$plugin";

// 包含公用函数
require_once "$docroot/plugins/$plugin/include/Common.php";
require_once "$docroot/plugins/$plugin/include/FanBlockRender.php";

// 初始化配置目录
if (!is_dir($cfg_dir)) {
  mkdir($cfg_dir, 0777, true);
}

// === 第一步：读取所有 fanctrlplus_*.cfg 文件 ===
$cfg_files = glob("$cfg_dir/{$plugin}_*.cfg");

if (empty($cfg_files)) {
  $temp_file = "$cfg_dir/{$plugin}_temp_0.cfg";
  if (!file_exists($temp_file)) {
file_put_contents($temp_file, <<<INI
custom=""
service="1"
controller=""
pwm="102"
max="255"
low="40"
high="60"
interval="2"
disks=""
syslog="1"
cpu_enable="0"
cpu_sensor=""
cpu_min_temp=""
cpu_max_temp=""
INI
);
  }
  // 重新加载 cfg_files
  $cfg_files = glob("$cfg_dir/{$plugin}_*.cfg");
}  

// === 第二步：从 order.cfg 读取左右栏顺序 ===
$order_left = [];
$order_right = [];

$order_file = "$cfg_dir/order.cfg";
if (is_file($order_file)) {
  $ini = parse_ini_file($order_file);
  foreach ($ini as $k => $v) {
    if (strpos($k, 'left') === 0)  $order_left[] = $v;
    if (strpos($k, 'right') === 0) $order_right[] = $v;
  }
}

// === 第三步：已出现在 order.cfg 的 cfg 列表，避免重复加载 ===
$seen = array_flip(array_merge($order_left, $order_right));

// === 第四步：准备 fan block 渲染数组（含左右栏 + 其他）===
$fan_column_left  = [];
$fan_column_right = [];
$all_cfg = [];

// 左栏渲染
foreach ($order_left as $file) {
  $path = "$cfg_dir/$file";
  if (is_file($path)) {
    $cfg = parse_ini_file($path);
    $cfg['file'] = $file;
    $fan_column_left[] = $cfg;
    $all_cfg[] = $cfg;
  }
}

// 右栏渲染
foreach ($order_right as $file) {
  $path = "$cfg_dir/$file";
  if (is_file($path)) {
    $cfg = parse_ini_file($path);
    $cfg['file'] = $file;
    $fan_column_right[] = $cfg;
    $all_cfg[] = $cfg;
  }
}

// === 第五步：加载未在 order.cfg 出现的正式 cfg（默认塞入右栏）===
foreach ($cfg_files as $path) {
  $basename = basename($path);
  if (!isset($seen[$basename]) && strpos($basename, '_temp_') === false) {
    $cfg = parse_ini_file($path);
    $cfg['file'] = $basename;
    $fan_column_right[] = $cfg;
    $all_cfg[] = $cfg;
  }
}

// === 第六步：加载所有 temp_x.cfg，默认加入右栏 ===
foreach ($cfg_files as $path) {
  $basename = basename($path);
  if (strpos($basename, '_temp_') !== false) {
    $cfg = parse_ini_file($path);
    $cfg['file'] = $basename;
    $fan_column_right[] = $cfg;
    $all_cfg[] = $cfg;
  }
}
$pwms = list_pwm();
$disks = list_valid_disks_by_id();
$width = 300;
$cpu_sensors = detect_cpu_sensors();

// === 读取 FCP Airflow 开关 ===
function fcp_airflow_enabled(string $cfg_dir): bool {
  $labels_file = $cfg_dir.'/pwm_labels.cfg';
  if (!is_file($labels_file)) return false;
  foreach (file($labels_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) as $ln) {
    $ln = trim($ln);
    if ($ln === '' || $ln[0] === '#') continue;
    if (preg_match('/^__FCP_AIRFLOW__\s*=\s*([01])\s*$/', $ln, $m)) {
      return $m[1] === '1';
    }
  }
  return false;
}

$fcp_airflow_enabled = fcp_airflow_enabled($cfg_dir);
?>

<div class="fanctrl-header">
  <div class="fanctrl-indicator-container" id="fanctrl-indicator" title="Fan control status">
    <span class="fanctrl-label">Running</span>
    <div class="fanctrl-dot"></div>
    <div class="fanctrl-dot"></div>
    <div class="fanctrl-dot"></div>
  </div>
  <b id="fanctrlplus-sort-toggle"
     class="system icon-u-lock green-text fanctrl-sort-toggle"
     title="Unlock to rearrange fans"></b>
</div>

<script>
const DEBUG = false; // ✅ 设置是否开启调试输出

const themeClass = document.documentElement.className;
let cssFile = '/plugins/fanctrlplus/css/fanctrlplus-swal2.css';
if (themeClass.includes('Theme--black') || themeClass.includes('Theme--gray')) {
  cssFile = '/plugins/fanctrlplus/css/fanctrlplus-swal2-dark.css';
}
const link = document.createElement('link');
link.rel = 'stylesheet';
link.type = 'text/css';
link.href = cssFile;
document.head.appendChild(link);

function updatePwmDropdowns() {
  // 统计所有已选PWM（不为空）
  const selected = [];
  $('.pwm-controller').each(function() {
    const val = $(this).val();
    if (val) selected.push(val);
  });

  // 逐个select处理option
  $('.pwm-controller').each(function() {
    const self = $(this);
    const ownVal = self.val();
    self.find('option').each(function() {
      const optVal = $(this).val();
      if (optVal === ownVal || !selected.includes(optVal)) {
        $(this).prop('disabled', false);
      } else {
        $(this).prop('disabled', true);
      }
    });
  });
}  

const dropdownChecklistOptions = {
  emptyText: '(None)',
  width: 300,
  explicitClose: '...close',
  textFormatFunction: function (options) {
    const selected = options.filter(':selected');
    const count = selected.length;
    const tooltip = selected.map(function () {
      return $(this).text();
    }).get().join('\n') || '(None)';
    setTimeout(() => {
      options.closest('td').find('.ui-dropdownchecklist-text').attr('title', tooltip);
    }, 10);
    return count === 0 ? '(None)' : `Selected ${count} Disk${count > 1 ? 's' : ''}`;
  }
};

$(function() {
  // 跳动绿点动画
  let dotIndex = 0;
  const dotEls = document.querySelectorAll('#fanctrl-indicator .fanctrl-dot');
  dotEls.forEach(dot => dot.classList.remove('visible'));
  dotEls[dotIndex].classList.add('visible');
  function animateDots() {
    const container = document.getElementById('fanctrl-indicator');
    if (!container || container.classList.contains('fanctrl-stopped')) return;
    dotEls.forEach(dot => dot.classList.remove('visible'));
    dotIndex = (dotIndex + 1) % dotEls.length;
    dotEls[dotIndex].classList.add('visible');
  }
  setInterval(animateDots, 2000);

  // 初始化 SVG 风扇转动
  $('.fan-block svg[id^="fan-icon-"]').each(function() {
    const id = $(this).attr('id');
    updateRotorById(id, true);
  });

  function updateRotorById(fanId, isRunning = true) {
    const fanIcon = document.getElementById(fanId);
    if (!fanIcon) return;
    const rotor = fanIcon.querySelector('.rotor');
    if (rotor) rotor.classList.toggle('rotating', isRunning);

    const bg = getComputedStyle(document.body).backgroundColor;
    const match = bg.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/);
    const brightness = match ? (parseInt(match[1]) + parseInt(match[2]) + parseInt(match[3])) / 3 : 255;
    const isDark = brightness < 128;

    let frameColor, hubColor;
    if (isRunning) {
      frameColor = isDark ? '#ffffff' : '#000000';
      hubColor   = isDark ? '#cccccc' : '#666666';
    } else {
      frameColor = '#cc0000';
      hubColor   = '#ff6666';
    }
    const frame = fanIcon.querySelector('.frame');
    const hub   = fanIcon.querySelector('.hub');
    if (!frame || !hub) {
      setTimeout(() => updateRotorById(fanId, isRunning), 100);
      return;
    }
    frame.setAttribute('fill', frameColor);
    hub.setAttribute('fill', hubColor);
  }

  window.updateFanControlStatus = function(isRunning = null) {
    if (isRunning === null) {
      fetch("/plugins/fanctrlplus/include/FanctrlLogic.php?op=status")
        .then(res => res.text())
        .then(status => updateFanControlStatus(status.trim() === "running"));
      return;
    }
    const container = document.getElementById('fanctrl-indicator');
    const label = container.querySelector('.fanctrl-label');
    if (isRunning) {
      container.classList.remove('fanctrl-stopped');
      label.textContent = 'Running';
    } else {
      container.classList.add('fanctrl-stopped');
      label.textContent = 'Inactive';
    }
  };

  function updateStatusLightAndButton() {
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status'}, function(statusObj) {
      const isRunning = statusObj.status === 'running';
      updateFanControlStatus(isRunning);
      const btn = $('#toggle-daemon');
      btn.text(isRunning ? '⏹️ Stop' : '▶️ Start');
      btn.attr('title', isRunning ? 'Stop fan control.' : 'Start fan control.');
      btn.prop('disabled', false);
    }).fail(function(jqXHR, textStatus, errorThrown) {
    });
  }
  
  function updateAllFanStatus() {
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', { op: 'status_all' }, function (statusMap) {
      $('.fan-block').each(function () {
        const block = $(this);
        const cfgFile = block.data('file');
        if (!cfgFile) return;
        const matchedKey = Object.keys(statusMap).find(k => k.toLowerCase() === cfgFile.toLowerCase());
        const status = matchedKey ? statusMap[matchedKey] : 'stopped';
        const isRunning = status === 'running';

        const fanSvg = block.find('svg')[0];
        if (!fanSvg) return;

        const rotor = fanSvg.querySelector('.rotor');
        const frame = fanSvg.querySelector('.frame');
        const hub   = fanSvg.querySelector('.hub');
        if (rotor) rotor.classList.toggle('rotating', isRunning);

        const bg = getComputedStyle(document.body).backgroundColor;
        const match = bg.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/);
        const brightness = match ? (parseInt(match[1]) + parseInt(match[2]) + parseInt(match[3])) / 3 : 255;
        const isDark = brightness < 128;

        const frameColor = isRunning ? (isDark ? '#ffffff' : '#000000') : '#cc0000';
        const hubColor   = isRunning ? (isDark ? '#cccccc' : '#666666') : '#ff6666';
        if (frame) frame.setAttribute('fill', frameColor);
        if (hub)   hub.setAttribute('fill', hubColor);

        const cpuEnabled = block.find('select[name^="cpu_enable["]').val() === "1";
        const hasDisks = block.find('select[name^="disks["] option:selected').length > 0;
        const container = fanSvg.closest('.fan-svg-container');
        if (container) {
          const sources = [];
          if (cpuEnabled) sources.push("CPU");
          if (hasDisks) sources.push("Disk");

          const sourceText = sources.length
            ? ` (based on ${sources.join(" and ")} temperature)`
            : '';

          container.title = `Fan control: ${isRunning
            ? `Active${sourceText}`
            : 'Inactive (not automatically controlled)'}`;
        }
      });
    }).fail(function (jqXHR, textStatus, errorThrown) {
      ensureAtLeastOneFanBlock();
    });
  }
  updateStatusLightAndButton();
  updateAllFanStatus();
  setInterval(function() {
    updateStatusLightAndButton();
    updateAllFanStatus();
  }, 30000);

  window.toggleDaemon = function() {
    const btn = $('#toggle-daemon');
    btn.prop('disabled', true);
    const action = btn.text().includes('Stop') ? 'stop' : 'start';
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: action}, function() {
      let tries = 0, maxTries = 10;
      const check = () => {
        $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status'}, function(data) {
          const isRunning = data.status === 'running';
          const wantRunning = action === 'start';
          if (isRunning === wantRunning || tries >= maxTries) {
            updateStatusLightAndButton();
            updateAllFanStatus();
            btn.prop('disabled', false);
          } else {
            tries++;
            setTimeout(check, 500);
          }
        });
      };
      check();
    }).fail(function(jqXHR, textStatus, errorThrown) {
      btn.prop('disabled', false);
    });
  };

  window.identifyFan = function(pwm, mode, btn) {
    if (!pwm) {
      alert('Please select a PWM controller.');
      return;
    }
    if (!btn) return;

    const $btn = $(btn);
    const origText = $btn.data('orig') || $btn.text();
    $btn.data('orig', origText);
    $btn.prop('disabled', true).text("Identifying...");

    $.ajax({
      url: '/plugins/fanctrlplus/include/FanctrlLogic.php',
      method: 'GET',
      data: { op: 'identify', pwm: pwm, mode: mode },
      timeout: 1000,
      success: function() {
        let seconds = (mode === 'pulse') ? 40 : 30;
        const interval = setInterval(() => {
          if (seconds <= 0) {
            clearInterval(interval);
            $btn.text($btn.data('orig')).prop('disabled', false);
          } else {
            // 显示不同模式的倒计时提示
            let label = mode === 'pause' ? 'Paused'
                      : mode === 'max'   ? 'Max'
                      : 'Pulse';
            $btn.text(`${label} (${seconds}s)`);
            seconds--;
          }
        }, 1000);
      },
      error: function() {
        $btn.text($btn.data('orig')).prop('disabled', false);
      }
    });
  };

  window.ensureAtLeastOneFanBlock = function () {
    const realBlocks = $('.fan-block').not('.sortable-placeholder, .ui-sortable-placeholder');
    if (realBlocks.length === 0) {
      addFan();
    }
  };

  window.addFan = function () {
    const index = $('.fan-block').length;

    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', { op: 'newtemp', index: index }, function (html) {
      const leftCount = $('#fan-column-left .fan-block').length;
      const rightCount = $('#fan-column-right .fan-block').length;
      const targetColumn = (leftCount <= rightCount) ? '#fan-column-left' : '#fan-column-right';

      const $html = $(html);
      $(targetColumn).append($html);

      initOriginalForBlock($html);

      $html.find('.disk-select').dropdownchecklist(dropdownChecklistOptions);

      updateAllFanStatus();
      ensureColumnDroppable();
      applySortableState();
      updatePwmDropdowns();
      bindPWMChangeHandlers();

      setTimeout(() => {
        updateAllFanStatus();
      
        bindUnitInputs([
          { selector: 'input[id^="pwm_percent_input_"]', unit: '%', min: 0, max: 100 },
          { selector: 'input[id^="max_percent_input_"]', unit: '%', min: 0, max: 100 },
          { selector: `#idle_percent_input_${index}`, unit: '%',  min: 0, max: 100 },
          { selector: 'input[id^="low_temp_input_"]', unit: '°C', min: 1, max: 100 },
          { selector: 'input[id^="high_temp_input_"]', unit: '°C', min: 1, max: 100 },
          { selector: 'input[id^="cpu_low_temp_input_"]', unit: '°C', min: 1, max: 95 },
          { selector: 'input[id^="cpu_high_temp_input_"]', unit: '°C', min: 1, max: 110 },
          { selector: 'input[id^="interval_input_"]', unit: ' min', min: 1, max: 60 }
        ]);

        $html.find('select[id^="cpu-enable-"]').each(function () {
          const index = this.id.replace('cpu-enable-', '');
          window.handleCpuEnableChange(this, index);
        });

        bindFanSpeedEvents();
        bindIdleEvents();
      }, 100);
    });
  };

  $('form').on('change keyup', 'input, select, textarea', function() {
    $('form').trigger('ui:changed');
  });

  $('form').on('ui:changed', function() {
    $('input[name="#apply"]').prop('disabled', false);
  });

  function sanitizePercent(str) {
    return parseInt(String(str).replace('%', '').replace(/\D/g, '') || '0', 10);
  }

  // 在更新 PWM 显示时，连带更新 input 的 title 提示
  function updateFanSpeedDisplay(i) {
    const $minInput = $(`#pwm_percent_input_${i}`);
    const $maxInput = $(`#max_percent_input_${i}`);

    let rawMin = stripUnit($minInput.val());
    let rawMax = stripUnit($maxInput.val());

    if (!rawMin && !rawMax) return;

    let minVal = parseInt(rawMin || 0);
    let maxVal = parseInt(rawMax || 0);

    minVal = Math.min(Math.max(minVal, 0), 100);
    maxVal = Math.min(Math.max(maxVal, 0), 100);

    if (rawMin) $minInput.val(`${minVal}%`);
    if (rawMax) $maxInput.val(`${maxVal}%`);

    const pwmMin = Math.round(minVal * 255 / 100);
    const pwmMax = Math.round(maxVal * 255 / 100);

    $(`#pwm_display_min_${i}`).text(rawMin ? `（${pwmMin} PWM）` : '');
    $(`#pwm_display_max_${i}`).text(rawMax ? `（${pwmMax} PWM）` : '');

    $minInput.attr('title', rawMin ? `Minimum speed: ${minVal}% = ${pwmMin} PWM` : '');
    $maxInput.attr('title', rawMax ? `Maximum speed: ${maxVal}% = ${pwmMax} PWM` : '');
  }

  function bindFanSpeedEvents() {
    $('.fan-block').each(function (i) {
      $(`#pwm_percent_input_${i}, #max_percent_input_${i}`).off('input');
      updateFanSpeedDisplay(i);
      $(`#pwm_percent_input_${i}, #max_percent_input_${i}`).on('input', function () {
        updateFanSpeedDisplay(i);
        updateIdleDisplay(i);
      });
    });
  }

  function updateIdleDisplay(i) {
    const $idleInput = $(`#idle_percent_input_${i}`);
    const $minInput  = $(`#pwm_percent_input_${i}`);

    const rawIdle = stripUnit($idleInput.val());
    if (!rawIdle) {
      $idleInput.attr('title', '');
      return;
    }

    let idleVal = Math.min(100, Math.max(0, parseInt(rawIdle, 10)));

    // 软夹到 Min（若 Min 有值）
    const rawMin = stripUnit($minInput.val());
    if (rawMin) {
      const minVal = Math.min(100, Math.max(0, parseInt(rawMin, 10)));
      if (!Number.isNaN(minVal)) idleVal = Math.min(idleVal, minVal);
    }

    $idleInput.val(`${idleVal}%`);
    const pwmIdle = Math.round(idleVal * 255 / 100);
    $idleInput.attr('title', `Idle speed: ${idleVal}% = ${pwmIdle} PWM`);
  }

  function bindIdleEvents() {
    $('input[id^="idle_percent_input_"]').each(function () {
      const i = this.id.split('_').pop();
      const $idle = $(`#idle_percent_input_${i}`);

      $idle.off('input change').on('input change', function () {
        updateIdleDisplay(i);
        setApplyAllButtonState();
      });

      updateIdleDisplay(i);
    });
  }

  $(document).ready(bindFanSpeedEvents);
  $(document).ready(bindIdleEvents); 
  $(document).ready(applySortableState);

  function bindUnitInputs(unitConfigs) {
    unitConfigs.forEach(({ selector, unit, min = 0, max = 100 }) => {
      document.querySelectorAll(selector).forEach(input => {
        const enforceUnit = () => {
          let val = (input.value ?? '').toString().replace(/\D/g, '');

          // 如果转换后是空字符串，就不设置单位
          if (!val) {
            input.value = '';
            return;
          }

          val = Math.min(Math.max(parseInt(val), min), max);
          input.value = val + unit;

          // 光标移到单位前
          const pos = input.value.indexOf(unit);
          input.setSelectionRange(pos, pos);
        };

        input.addEventListener('input', enforceUnit);

        input.addEventListener('click', () => {
          setTimeout(() => {
            const pos = input.value.indexOf(unit);
            input.setSelectionRange(pos, pos);
          }, 0);
        });

        enforceUnit();  // 初始执行一次
      });
    });
  }

  $(document).ready(function () {
    bindUnitInputs([
      { selector: 'input[id^="pwm_percent_input_"]', unit: '%', min: 0, max: 100 },
      { selector: 'input[id^="max_percent_input_"]', unit: '%', min: 0, max: 100 },
      { selector: 'input[id^="idle_percent_input_"]', unit: '%',  min: 0, max: 100 },
      { selector: 'input[id^="low_temp_input_"]', unit: '°C', min: 1, max: 100 },
      { selector: 'input[id^="high_temp_input_"]', unit: '°C', min: 1, max: 100 },
      { selector: 'input[id^="cpu_low_temp_input_"]', unit: '°C', min: 1, max: 95 },
      { selector: 'input[id^="cpu_high_temp_input_"]', unit: '°C', min: 1, max: 110 },
      { selector: 'input[id^="interval_input_"]', unit: ' min', min: 1, max: 60 }
    ]);
    loadPWMOptions();
    bindPWMChangeHandlers();
  });

  function stripUnit(val) {
    return (val ?? '').toString().replace(/\s*(min|°C|%)/gi, '').trim();
  }

  // Identify 弹窗块
  function showIdentifyModal(pwm = '') {
    const html = `
      <div class="fcp-swal-intro">
        You’ve selected a PWM controller that hasn’t been labeled yet.<br>
        To help identify which physical fan it controls, first choose an <b>Identify Mode</b> (<b>Pause</b>, <b>Max</b>, or <b>Pulse</b>), then click <b>Identify</b> and observe how the fan reacts.
        <br><br>
        <em>Note:</em> some fans have a built-in minimum RPM; with <b>Pause</b> they may slow to their minimum instead of fully stopping.
        <br><br>
        If you don’t need to identify it now, just click <b>Close</b> to continue setting up.<br>
        This feature is also available anytime in the <b>Identify PWM Controller</b> section below.
      </div>

      <table>
        <tr>
          <td class="fcp-td-right">
            <label for="identify-modal-select">Select PWM Controller:</label>
          </td>
          <td>
            <select id="identify-modal-select" class="fcp-field-220"></select>
          </td>
        </tr>

        <tr>
          <td class="fcp-td-right fcp-pt-12">
            <label for="identify-modal-mode-select">Identify Mode:</label>
          </td>
          <td class="fcp-pt-12">
            <select id="identify-modal-mode-select" class="fcp-field-220">
              <option value="pause" selected>Pause (30s)</option>
              <option value="max">Max Speed (30s)</option>
              <option value="pulse">Pulse (40s)</option>
            </select>
          </td>
        </tr>

        <tr>
          <td class="fcp-td-right fcp-pt-12">
            <label for="identify-modal-label-input">Custom Label:</label>
          </td>
          <td class="fcp-pt-12">
            <input type="text" id="identify-modal-label-input" placeholder="Label (e.g. Rear Fan)" class="fcp-field-220">
          </td>
        </tr>
      </table>

      <div class="fcp-swal-actions">
        <button type="button" class="btn" id="identify-btn">Identify</button>
        <button type="button" class="btn" id="save-label-btn">Save Label</button>
        <span id="identify-modal-label-tip" class="save-tip"></span>
      </div>`;

    Swal.fire({
      title: 'Identify PWM Controller',
      html,
      showCancelButton: true,
      showConfirmButton: false,
      cancelButtonText: 'Close',
      customClass: 'wide-swal',
      didOpen: () => {
        // 焦点陷阱
        const dummy = document.createElement('div');
        dummy.tabIndex = -1;
        dummy.className = 'fcp-focus-trap';
        Swal.getPopup().prepend(dummy);
        dummy.focus();

        // 加载并选中 pwm
        if (pwm) {
          loadPWMOptions('identify-modal-select', pwm);
        } else {
          loadPWMOptions('identify-modal-select');
        }

        // 事件绑定：Identify
        $('#identify-btn').off('click').on('click', function () {
          const pwmVal  = $('#identify-modal-select').val();
          const modeVal = $('#identify-modal-mode-select').val();
          identifyFan(pwmVal, modeVal, this);  // 使用你已实现的 identifyFan()
        });

        // 事件绑定：保存标签
        $('#save-label-btn').off('click').on('click', function () {
          savePWMLabel('identify-modal-select', 'identify-modal-label-input', 'identify-modal-label-tip');
        });
      }
    });
  }
  window.showIdentifyModal = showIdentifyModal;

  window.loadPWMOptionsIntoElement = function(selector) {
    $.getJSON('/plugins/fanctrlplus/include/FanctrlLogic.php?op=getpwm', function(pwmList) {
      const select = $(selector);
      if (!select.length) return;
      select.empty();
      select.append('<option value="">-- Select PWM Controller --</option>');
      pwmList.forEach(pwm => {
        let display = pwm.chip + ' - ' + pwm.name;
        if (pwm.label) {
          display += '（' + pwm.label + '）';
        }
        select.append(`<option value="${pwm.sensor}">${display}</option>`);
      });
    }).fail(function(jqXHR, textStatus, errorThrown) {
      console.error('Failed to load PWM list into ' + selector, textStatus, errorThrown);
    });
  };
  

  window.loadPWMOptions = function(selectIds = ['pwm-select', 'identify-pwm-select', 'identify-modal-select'], selectedPWM = '') {
    if (!Array.isArray(selectIds)) {
      selectIds = [selectIds];
    }

    $.getJSON('/plugins/fanctrlplus/include/FanctrlLogic.php?op=getpwm', function(pwmList) {
      selectIds.forEach(selectId => {
        const select = $('#' + selectId);
        if (!select.length) return;

        select.empty();
        select.append('<option value="">-- Select PWM Controller --</option>');

        pwmList.forEach(pwm => {
          let display = pwm.chip + ' - ' + pwm.name;
          if (pwm.label) display += `（${pwm.label}）`;

          // 判断是否选中
          const isSelected = (selectedPWM && pwm.sensor === selectedPWM) ? ' selected' : '';
          select.append(`<option value="${pwm.sensor}"${isSelected}>${display}</option>`);
        });

        // 如果传了 selectedPWM 但找不到匹配选项，强制设置
        if (selectedPWM && !select.val()) {
          select.val(selectedPWM);
        }
      });
    }).fail(function(jqXHR, textStatus, errorThrown) {
      console.error('Failed to load PWM list:', textStatus, errorThrown);
    });
  };

  window.savePWMLabel = function(selectId, inputId, tipId) {
    const select = $('#' + selectId);
    const input = $('#' + inputId);
    const tip = $('#' + tipId);
    const pwm = select.val();
    const label = input.val().trim();

    if (!pwm) {
      alert('Please select a PWM controller!');
      return;
    }

    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', {
      op: 'savelabel',
      pwm: pwm,
      label: label
    }, function(data) {
      if (data && data.status === 'ok') {
        input.val('');
        tip.css('color', '#4caf50')
          .text(label ? 'Label saved!' : 'Label cleared!').show();
        setTimeout(() => {
          tip.fadeOut(500, function() {
            $(this).text('').show();
          });
        }, 2500);
        loadPWMOptions && loadPWMOptions();
        refreshAllFanBlockPWMLabels && refreshAllFanBlockPWMLabels();
      } else {
        tip.css('color', '#f44336').text('Failed to save');
        setTimeout(() => {
          tip.fadeOut(500, function() {
            $(this).css('color', '#4caf50').text('').show();
          });
        }, 3500);
      }
    }, 'json').fail(function() {
      alert('Error saving label (network or server error)');
    });
  }

  let pwmLabelMap = {};
  function updatePWMLabelMap() {
    $.getJSON('/plugins/fanctrlplus/include/FanctrlLogic.php?op=getpwm', function(pwmList) {
      pwmLabelMap = {};
      pwmList.forEach(pwm => {
        pwmLabelMap[pwm.sensor] = pwm.label || '';
      });
    });
  }

  function bindPWMChangeHandlers() {
    $('.pwm-controller').off('change').on('change', function () {
      const selectedPWM = $(this).val();
      if (!selectedPWM) return;

      // 查询当前 PWM 是否有 label
      $.getJSON('/plugins/fanctrlplus/include/FanctrlLogic.php?op=getpwm', function (pwmList) {
        const match = pwmList.find(pwm => pwm.sensor === selectedPWM);
        if (match && !match.label) {
          // 如果该 PWM 没有 label，才弹窗
          showIdentifyModal(selectedPWM);
        }
      });
    });
  }

  function refreshAllFanBlockPWMLabels() {
    $.getJSON('/plugins/fanctrlplus/include/FanctrlLogic.php?op=getpwm', function(pwmList) {
      // 收集所有 fan block 已选中的 PWM
      const usedPWMs = [];
      $('.pwm-controller').each(function () {
        const val = $(this).val();
        if (val) usedPWMs.push(val);
      });

      $('.pwm-controller').each(function () {
        const selected = $(this).val();
        $(this).empty().append('<option value="">-- Select PWM Controller --</option>');

        pwmList.forEach(pwm => {
          let display = pwm.chip + ' - ' + pwm.name;
          if (pwm.label) display += `（${pwm.label}）`;

          const isSelected = pwm.sensor === selected;
          const isUsed = usedPWMs.includes(pwm.sensor) && !isSelected;

          $(this).append(`<option value="${pwm.sensor}" ${isSelected ? 'selected' : ''} ${isUsed ? 'disabled' : ''}>${display}</option>`);
        });
      });

      updatePWMLabelMap();
      bindPWMChangeHandlers();
    });
  }

  function initOriginalForBlock($block) {
    const original = {
      custom: $block.find('input[name^="custom["]').val(),
      service: $block.find('select[name^="service["]').val(),
      controller: $block.find('select[name^="controller["]').val(),
      pwm_percent: stripUnit($block.find('input[name^="pwm_percent["]').val()),
      max_percent: stripUnit($block.find('input[name^="max_percent["]').val()),
      idle_percent: stripUnit($block.find('input[name^="idle_percent["]').val() || '0'),
      low: stripUnit($block.find('input[name^="low["]').val()),
      high: stripUnit($block.find('input[name^="high["]').val()),
      interval: stripUnit($block.find('input[name^="interval["]').val()),
      disks: $block.find('select[name^="disks["]').val(),
      cpu_enable: $block.find('select[name^="cpu_enable["]').val(),
      cpu_sensor: $block.find('select[name^="cpu_sensor["]').val(),
      cpu_min_temp: stripUnit($block.find('input[name^="cpu_min_temp["]').val()),
      cpu_max_temp: stripUnit($block.find('input[name^="cpu_max_temp["]').val())
    };
    $block.data('original', original);
  }

  function setApplyAllButtonState() {
    let dirty = false;

    $('.fan-block').each(function () {
      const $block = $(this);
      const original = $block.data('original');
      const current = {
        custom: $block.find('input[name^="custom["]').val(),
        service: $block.find('select[name^="service["]').val(),
        controller: $block.find('select[name^="controller["]').val(),
        pwm_percent: stripUnit($block.find('input[name^="pwm_percent["]').val()),
        max_percent: stripUnit($block.find('input[name^="max_percent["]').val()),
        idle_percent: stripUnit($block.find('input[name^="idle_percent["]').val() || '0'),
        low: stripUnit($block.find('input[name^="low["]').val()),
        high: stripUnit($block.find('input[name^="high["]').val()),
        interval: stripUnit($block.find('input[name^="interval["]').val()),
        disks: $block.find('select[name^="disks["]').val(),
        cpu_enable: $block.find('select[name^="cpu_enable["]').val(),
        cpu_sensor: $block.find('select[name^="cpu_sensor["]').val(),
        cpu_min_temp: stripUnit($block.find('input[name^="cpu_min_temp["]').val()),
        cpu_max_temp: stripUnit($block.find('input[name^="cpu_max_temp["]').val())
      };

      if (JSON.stringify(original) !== JSON.stringify(current)) {
        dirty = true;
      }
    });

    $('#apply-btn').prop('disabled', !dirty);
  }

  function ensureColumnDroppable() {
    ['#fan-column-left', '#fan-column-right'].forEach(function (selector) {
      const $col = $(selector);

      if (
        $col.children('.fan-block:not(.sortable-placeholder)').length === 0 &&
        $col.find('.sortable-placeholder').length === 0
      ) {
        $col.append(`<div class="fan-block sortable-placeholder">Drag Fan Configuration Here</div>`);
      }

      if ($col.children('.fan-block:not(.sortable-placeholder)').length > 0) {
        $col.find('.sortable-placeholder').remove();
      }
      const blockHeight = $('.fan-block:not(.sortable-placeholder):first').outerHeight();
      $('.sortable-placeholder').css('min-height', blockHeight + 'px');
    });
  }

  // 全局：默认上锁
  let sortableUnlocked = false;

  // 锁 = destroy，解锁 = 重新 sortable(opts)
  function applySortableState() {
    const $cols = $('#fan-column-left, #fan-column-right');

    $cols.each(function () {
      const inst = $(this).sortable('instance');
      if (inst) $(this).sortable('destroy');
    });

    if (!sortableUnlocked) {
      $cols.removeClass('ui-sortable ui-sortable-disabled');
      $cols.find('.fan-block').removeClass('ui-sortable-handle');
      return;
    }

    // 解锁：重建实例
    const hasHandle = $cols.find('.fcp-drag-handle').length > 0;
    const opts = {
      items: '> .fan-block:not(.sortable-placeholder)',
      tolerance: 'pointer',
      placeholder: 'fan-placeholder',
      start: function (e, ui) { ui.placeholder.height(ui.item.outerHeight()); },
      over:  function () { $(this).find('.sortable-placeholder').remove(); },
      out:   function () {
        const $col = $(this);
        const hasReal = $col.children('.fan-block:not(.sortable-placeholder)').length > 0;
        if (!hasReal && $col.find('.sortable-placeholder').length === 0) {
          const h = $('.fan-block:not(.sortable-placeholder):first').outerHeight() || 100;
          $('<div class="fan-block sortable-placeholder">Drag Fan Configuration Here</div>')
            .css('min-height', h + 'px').appendTo($col);
        }
      },
      update: function () { ensureColumnDroppable(); saveFanOrder(); },

      cancel: 'input,textarea,select,button,.dropdownchecklist,.dropdownchecklist *,.fcp-range-grid,.chart-btn',
      distance: 8,
    };
    if (hasHandle) { opts.handle = '.fcp-drag-handle'; opts.delay = 150; }

    $cols.sortable(opts);
  }

  $('#sort-lock-toggle').on('click', function () {
    sortableUnlocked = !sortableUnlocked;
    $('html').toggleClass('fcp-locked', !sortableUnlocked);
    applySortableState();
  });

  $('.disk-select').dropdownchecklist(dropdownChecklistOptions);

  $('.fan-block').each(function () {
    initOriginalForBlock($(this));
  });

  $('#fan-area').on('input change', 'input, select', function () {
    setApplyAllButtonState();
  });

  setApplyAllButtonState();
  ensureColumnDroppable();

  $(document).on('change', '.pwm-controller', updatePwmDropdowns);

  $(document).on('click', '#apply-btn', function (e) {
    let valid = true;
    let errorMsg = '';

    const namesSeen = new Set();
    let duplicateFound = false;

    $('.custom-name-input').each(function() {
      const block = $(this).closest('.fan-block');
      const name = $(this).val().trim();
      const intervalField = block.find('.interval-input');
      const interval = intervalField.length ? stripUnit(intervalField.val()) : '';
      const low = stripUnit(block.find('input[name^="low["]').val());
      const high = stripUnit(block.find('input[name^="high["]').val());
      const pwm_percent = stripUnit(block.find('input[name^="pwm_percent["]').val());
      const max_percent = stripUnit(block.find('input[name^="max_percent["]').val());
      const pwm = block.find('.pwm-controller').val();
      
      if (name === '') {
        valid = false;
        errorMsg = 'Custom Name is required.';
        return false;
      }
      if (!/^[A-Za-z0-9_]+$/.test(name)) {
        valid = false;
        errorMsg = 'Custom Name can only contain letters, numbers, and underscores.';
        return false;
      }

      if (!pwm || pwm === "") {
        valid = false;
        errorMsg = 'Please select a PWM controller for each fan.';
        return false;
      }  

      if (/temp_/i.test(name)) {
        valid = false;
        errorMsg = 'Custom Name cannot contain "temp_".';
        return false;
      }
      
      if (namesSeen.has(name)) {
        valid = false;
        errorMsg = `Custom Name "${name}" is already used.`;
        duplicateFound = true;
        return false;
      }

      namesSeen.add(name);

      if (!/^\d+$/.test(interval) || parseInt(interval) <= 0) {
        valid = false;
        errorMsg = 'Interval cannot be empty or 0 (recommended: 1–5 min).';
        return false;
      } 
    });

    let rangeValid = true;

    $('.fan-block').each(function () {
      const block = $(this);
      const name = block.find('.custom-name-input').val() || `#${$(this).index() + 1}`;
      const lowTemp = parseInt(stripUnit(block.find('input[name^="low["]').val()));
      const highTemp = parseInt(stripUnit(block.find('input[name^="high["]').val()));
      const pwmMin = parseInt(stripUnit(block.find('input[name^="pwm_percent["]').val()));
      const pwmMax = parseInt(stripUnit(block.find('input[name^="max_percent["]').val()));
      const idlePct = parseInt(stripUnit(block.find('input[name^="idle_percent["]').val()));
      const cpuLow = parseInt(stripUnit(block.find('input[name^="cpu_min_temp["]').val()));
      const cpuHigh = parseInt(stripUnit(block.find('input[name^="cpu_max_temp["]').val()));

      if (!isNaN(lowTemp) && !isNaN(highTemp) && lowTemp >= highTemp) {
        alert(`Fan configuration "${name}": Disk Low Temp cannot exceed High Temp.`);
        rangeValid = false;
        return false;
      }

        if (!isNaN(cpuLow) && !isNaN(cpuHigh) && cpuLow >= cpuHigh) {
        alert(`Fan configuration "${name}": CPU Low Temp cannot exceed High Temp.`);
        rangeValid = false;
        return false;
      }

      if (!isNaN(pwmMin) && !isNaN(pwmMax) && pwmMin > pwmMax) {
        alert(`Fan configuration "${name}": Minimum fan speed cannot exceed Maximum.`);
        rangeValid = false;
        return false;
      }

      if (!isNaN(idlePct) && !isNaN(pwmMin) && idlePct > pwmMin) {
        alert(`Fan configuration "${name}": Idle Speed (%) cannot exceed Min Speed (%).`);
        rangeValid = false; return false;
      }
    });

    if (!rangeValid) 
      return;

    if (!valid) {
      alert(errorMsg);
      return;
    }

    $('.interval-input, .low-temp-input, .high-temp-input, .pwm-percent-input, .max-percent-input').each(function(){
      this.value = stripUnit(this.value);
    });

    $('.cpu-low-temp-input, .cpu-high-temp-input').each(function(){
      this.value = stripUnit(this.value);
    });

    saveFanOrder();
    updatePwmDropdowns();

    $('#fan-form')[0].submit();
  }); 

  // 通用 click 处理：syslog-switch + fcp-airflow-switch
  $(document).on('click', '.switch-button-background, .switch-button-label', function() {
    var $area = $(this).closest('.switch-area');
    var $input = $area.find('input[type="checkbox"]');
    if ($input.length === 0) return;

    var checked = !$input.prop('checked');
    $input.prop('checked', checked);

    // 切换 class 和文本
    $area.find('.switch-button-label.on').css('display', checked ? '' : 'none');
    $area.find('.switch-button-label.off').css('display', checked ? 'none' : '');
    $area.find('.switch-button-background').toggleClass('checked', checked);

    // 滑块动画
    $area.find('.switch-button-button').css('left', checked ? '12px' : '-1px');

    // 根据不同开关调用不同保存逻辑
    if ($input.hasClass('syslog-switch')) {
      var cfgFile = $input.data('cfg');
      saveSyslogSwitchState(cfgFile, checked);
    } else if ($input.hasClass('fcp-airflow-switch')) {
      saveAirflowSwitchState(checked);   // ✅ 用 jQuery $.post
    }
  });

  // 通用 change 处理：syslog-switch + fcp-airflow-switch
  $(document).on('change', '.syslog-switch, .fcp-airflow-switch', function() {
    var checked = $(this).prop('checked');
    var $area = $(this).closest('.switch-area');

    $area.find('.switch-button-label.on').css('display', checked ? '' : 'none');
    $area.find('.switch-button-label.off').css('display', checked ? 'none' : '');

    var $bg = $area.find('.switch-button-background');
    $bg.toggleClass('checked', checked);

    var $btn = $bg.find('.switch-button-button');
    $btn.css('left', checked ? '12px' : '-1px');
  });

  function refreshSyslogSettings() {
    $('#syslog-settings-area').load('/Settings/fanctrlplus #syslog-settings-area > *');
  }

  function saveSyslogSwitchState(cfgFile, checked) {
    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', {
      op: 'setsyslog',
      cfg: cfgFile,
      enabled: checked ? 1 : 0
    });
  }

  function saveAirflowSwitchState(checked) {
    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', {
      op: 'fcp_airflow_toggle',
      enabled: checked ? 1 : 0
    });  
  }
  
  $(document).on('click', '.delete-btn', function () {
    const block = $(this).closest('.fan-block');
    const file = block.data('file') || block.find('input.cfg-file').val();
    const custom = block.find('input[name^="custom["]').val() || '';
    const msg = custom
      ? `Are you sure you want to delete "${custom}"?`
      : `Are you sure you want to delete this fan configuration?`;
    if (!confirm(msg)) return;

    const isTemp = file.includes('_temp_');

    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', { op: 'delete', file: file })
      .done(function () {
        block.remove();

        const safeId = custom.replace(/[^a-zA-Z0-9_-]/g, '');
        $('#syslog-row-' + safeId).remove();

        setTimeout(() => {
          // 保证始终至少有一个 fan block
          const realBlocks = $('.fan-block').not('.sortable-placeholder, .ui-sortable-placeholder');
          if (realBlocks.length === 0) {
            ensureAtLeastOneFanBlock();
          }
          ensureColumnDroppable();

          // 非 temp 才更新顺序
          if (!isTemp) {
            let order = [];
            $('.fan-block').each(function () {
              const val = $(this).find('input.cfg-file').val();
              if (val && !val.includes('_temp_')) order.push(val);
            });
            saveFanOrder(order);
          }

          updateAllFanStatus();
          updatePwmDropdowns();
        }, 120);
      });
  });

  $(document).on('click', '.fanctrlplus-interval-refresh', function(e) {
    const btn = e.currentTarget;
    const icon = btn.querySelector('.fa');
    btn.style.color = '#aaa';
    if (icon) icon.classList.add('fa-spin');

    const label = btn.getAttribute('data-label');
    if (!label) {
      alert("Custom Name is not configured, cannot refresh!");
      return;
    }

    btn.style.pointerEvents = 'none';

    fetch(`/plugins/fanctrlplus/include/FanctrlLogic.php?op=refresh_single&custom=${encodeURIComponent(label)}`)
      .then(res => {
        if (!res.ok) throw new Error("Request failed");
        return res.text();
      })
      .then(() => {
        setTimeout(() => {
          if (icon) icon.classList.remove('fa-spin');
          btn.style.color = 'var(--blue-800)';
          btn.style.pointerEvents = '';
        }, 1800);
      })
      .catch(err => {
        btn.style.color = 'var(--blue-800)';
        if (icon) icon.classList.remove('fa-spin');
        btn.style.pointerEvents = '';
        alert("Manual Run failed: " + err.message);
      });

    e.preventDefault();
    e.stopPropagation();
  });

    // 初始化sortable
    function initSortableUnlocked() {
      const $cols = $('#fan-column-left, #fan-column-right');

      $cols.each(function () {
        const inst = $(this).sortable('instance');
        if (inst) $(this).sortable('destroy');
      });

      const hasHandle = $cols.find('.fcp-drag-handle').length > 0;

      const opts = {
        items: '> .fan-block:not(.sortable-placeholder)',
        connectWith: '.fan-column',
        opacity: 0.6,
        tolerance: 'pointer',
        helper: 'original',
        placeholder: 'fan-placeholder',
        start: function (e, ui) { ui.placeholder.height(ui.item.outerHeight()); },
        over:  function () { $(this).find('.sortable-placeholder').remove(); },
        out:   function () {
          const $col = $(this);
          const hasReal = $col.children('.fan-block:not(.sortable-placeholder)').length > 0;
          if (!hasReal && $col.find('.sortable-placeholder').length === 0) {
            const h = $('.fan-block:not(.sortable-placeholder):first').outerHeight() || 100;
            $('<div class="fan-block sortable-placeholder">Drag Fan Configuration Here</div>')
              .css('min-height', h + 'px').appendTo($col);
          }
        },
        update: function () { ensureColumnDroppable(); saveFanOrder(); },

        distance: 8,
        delay: 0,

        cancel: 'input,textarea,select,button,.dropdownchecklist,.dropdownchecklist *,.chart-btn'
      };

      if (hasHandle) {
        opts.handle = '.fcp-drag-handle';
      }

      $cols.sortable(opts);
    }

    // 锁定时彻底销毁；并防止后续旧代码再去 set option 报错
    function destroySortableLocked() {
      const $cols = $('#fan-column-left, #fan-column-right');
      $cols.each(function () {
        const inst = $(this).sortable('instance');
        if (inst) $(this).sortable('destroy');
      });
    }

    // 切换解锁按钮逻辑
    $('#fanctrlplus-sort-toggle').on('click', function () {
      if (!sortableUnlocked) {
        if ($('.fan-block[data-file*="_temp_"]').length > 0) {
          alert("Temporary fan configurations found. Please name them or delete before unlocking.");
          return;
        }
      }

      sortableUnlocked = !sortableUnlocked;

      // 启用或禁用 sortable
      if (sortableUnlocked) {
        initSortableUnlocked();
      } else {
        destroySortableLocked();
      }

      if (sortableUnlocked) {
        // 解锁状态
        $('.fan-block').addClass('draggable');
        $('.fan-svg-container').hide();
        $('.drag-handle').show();
        $(this)
          .removeClass('icon-u-lock green-text')
          .addClass('icon-u-lock-open red-text')
          .attr('title', 'Lock sorting fan configurations');
      } else {
        // 锁回状态
        $('.fan-block').removeClass('draggable');
        $('.fan-svg-container').show();
        $('.drag-handle').hide();
        $(this)
          .removeClass('icon-u-lock-open red-text')
          .addClass('icon-u-lock green-text')
          .attr('title', 'Unlock sorting fan configurations');

        // 延迟保存排序
        setTimeout(() => {
          saveFanOrder();
        }, 300);
      }
    });

    // 保存排序的函数
    function saveFanOrder() {
      const order = {
        left: [],
        right: []
      };

      // 清空旧的隐藏 input
      $('input[name^="order_left"]').remove();
      $('input[name^="order_right"]').remove();

      $('#fan-column-left .fan-block').each(function (i) {
        const val = $(this).find('input.cfg-file').val();
        if (typeof val === 'string' && val.trim() !== '') {
          order.left.push(val.trim());
          $('#fan-form').append(`<input type="hidden" name="order_left[${i}]" value="${val.trim()}">`);
        }
      });

      $('#fan-column-right .fan-block').each(function (i) {
        const val = $(this).find('input.cfg-file').val();
        if (typeof val === 'string' && val.trim() !== '') {
          order.right.push(val.trim());
          $('#fan-form').append(`<input type="hidden" name="order_right[${i}]" value="${val.trim()}">`);
        }
      });

      // 提交 AJAX（用于立即保存至 /plugins/fanctrlplus/order.cfg）
      if (order.left.length > 0 || order.right.length > 0) {
        $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', {
          op: 'saveorder',
          order: order
        }).done(function () {
          refreshSyslogSettings();
        }).fail(function (jqXHR, textStatus, errorThrown) {
        });
      }
    }
  updatePwmDropdowns();    

  window.handleCpuEnableChange = function(selectEl, index) {
    const enabled = selectEl.value === "1";

    // 选中所有 CPU 控制相关的 tr（包含 sensor 和 temp）
    const rows = document.querySelectorAll(`.cpu-control-${index}`);
    rows.forEach(row => {
      row.querySelectorAll('.cpu-input').forEach(el => {
        el.disabled = !enabled;
        el.classList.toggle('disabled', !enabled);
      });
    });

    document.querySelectorAll(`.cpu-control-${index} .cpu-label`).forEach(label => {
      label.classList.toggle('disabled', !enabled);
    });

    // 若启用且输入为空，则填入默认温度
    if (enabled) {
      const lowInput  = document.querySelector(`#cpu_low_temp_input_${index}`);
      const highInput = document.querySelector(`#cpu_high_temp_input_${index}`);

      if (lowInput && lowInput.value.trim() === '') {
        lowInput.value = '40°C';
      }
      if (highInput && highInput.value.trim() === '') {
        highInput.value = '70°C';
      }
    }
  };

  // 初始化所有 block 的状态，并绑定 onchange
  window.addEventListener('load', function () {
    requestAnimationFrame(() => {
      document.querySelectorAll('select[id^="cpu-enable-"]').forEach(select => {
        const index = select.id.replace('cpu-enable-', '');
        window.handleCpuEnableChange(select, index);  // 初始状态应用

        select.addEventListener('change', function () {
          window.handleCpuEnableChange(this, index);
        });
      });
    });
  });
  setTimeout(() => {
    document.querySelectorAll('select[id^="cpu-enable-"]').forEach(select => {
      const index = select.id.replace('cpu-enable-', '');
      const enabled = select.value === "1";
      document.querySelectorAll(`.cpu-control-${index} .cpu-label`).forEach(label => {
        label.classList.toggle('disabled', !enabled);
      });
    });
  }, 10);
});  
</script>

<form id="fan-form" method="POST" action="/update.php" target="progressFrame">
  <input type="hidden" name="#include" value="plugins/fanctrlplus/include/update.fanctrlplus.php">

  <!--------------- Fan block 区域保持原状 --------------->
  <div id="fan-area">
    <div id="fan-column-left" class="fan-column">
      <?php $i = 0;
      foreach ($order_left as $file) {
        $path = "$cfg_dir/$file";
        if (is_file($path)) {
          $cfg = parse_ini_file($path);
          $cfg['file'] = $file;
          $all_cfg[] = $cfg;
          echo render_fan_block($cfg, $i++, $pwms, $disks, $pwm_labels, $cpu_sensors);
        }
      }
      ?>
    </div>
    <div id="fan-column-right" class="fan-column">
      <?php
      foreach ($order_right as $file) {
        $path = "$cfg_dir/$file";
        if (is_file($path)) {
          $cfg = parse_ini_file($path);
          $cfg['file'] = $file;
          $all_cfg[] = $cfg;
          echo render_fan_block($cfg, $i++, $pwms, $disks, $pwm_labels, $cpu_sensors);
        }
      }
      ?>
    </div>
    <?php
    $seen = array_flip(array_merge($order_left, $order_right));
    $count_left = count($order_left);
    $count_right = count($order_right);
    $unsorted_cfgs = array_filter($cfg_files, function ($path) use ($seen) {
      $basename = basename($path);
      return !isset($seen[$basename]);
    });
    foreach ($unsorted_cfgs as $path) {
      $basename = basename($path);
      $cfg = parse_ini_file($path);
      $cfg['file'] = $basename;
      $all_cfg[] = $cfg;
      $html = addslashes(render_fan_block($cfg, $i, $pwms, $disks, $pwm_labels, $cpu_sensors));
      if ($count_left <= $count_right) {
        $target = '#fan-column-left';
        $count_left++;
      } else {
        $target = '#fan-column-right';
        $count_right++;
      }
      echo "<script>document.querySelector('$target').insertAdjacentHTML('beforeend', `$html`);</script>";
      $i++;
    }
    ?>
  </div>

  <div class="fcp-actions">
    <button type="button" onclick="addFan()">➕ Add Fan</button>
    <button type="button" id="apply-btn">Apply All</button>
    <button type="button" id="toggle-daemon" onclick="toggleDaemon()" disabled>Loading...</button>
  </div>

  <!----------------- Help & Tips --------------->
  <div class="fcp-help-wrap">
    <dl class="fcp-help-dl">
      <dt class="fcp-help-dt fcp-help-cursor" title="Helpful notes and usage tips">
        <span class="fa fa-info-circle fcp-help-icon"></span>
        <strong>Help & Tips</strong>
      </dt>
      <dd></dd>
    </dl>
  
  <blockquote class="inline_help">
    <p><strong>Usage Guide:</strong></p>

    <p><strong>Overview:</strong> Each fan block allows you to assign a PWM controller, set temperature thresholds, and specify which disks to monitor. You can also enable CPU temperature monitoring for finer control. 
        Use the “Identify” feature to label physical fans, then assign appropriate names for clarity (e.g. Rear Fan, HDD Fan).
    </p>

    <p><strong>Custom Name:</strong> This label will be used in logs, UI, and configuration files. Choose a clear name like “HDD_Bay” or “Rear” to identify each block. A valid name is required to save settings.</p>

    <p><strong>Fan Control:</strong> Enables or disables the selected fan configuration. When disabled, temperature monitoring and fan speed control for that configuration will stop. 
        In contrast, the <strong>Stop</strong> button fully halts the fanctrlplus service, stopping all fan updates and logging across all configurations.
    </p>

    <p><strong>PWM Controller:</strong> Each fan is controlled by a specific PWM controller (e.g. <code>pwm1</code>, <code>pwm2</code>, etc). Select the controller that corresponds to the physical fan you want to manage.</p>

    <p>If the selected PWM hasn't been labeled yet, the system will automatically open the <strong>Identify PWM Controller</strong> popup to help you locate which fan it controls by temporarily pausing it for 30 seconds.</p>

    <p>It's strongly recommended to <strong>label each PWM</strong> after identification for future reference. If you're not ready to label it now, simply click <strong>Close</strong> to continue setting up. 
       You can use the <strong>Identify PWM Controller</strong> section below at any time to perform this task later.
    </p>

    <p style="color:red;">
      <strong>Note:</strong> Since v1.3.1, FanCtrl&nbsp;Plus supports CPU temperature monitoring.  
      However, it is <strong>not recommended</strong> to use FanCtrl&nbsp;Plus to control your CPU fan.  
      Please proceed at your own risk.
    </p>

    <p><strong>Fan Speed Range:</strong> This sets the minimum and maximum PWM duty cycle values. For example, setting the range to 40–80% means the fan will always run at least 40% speed when cool, and will not exceed 80% speed even at high temperatures.</p>

    <p><strong>Interval:</strong> How often the plugin checks disk (and, if enabled, CPU) temperatures and adjusts fan speed accordingly. Shorter intervals provide more responsive cooling but may result in more frequent fan changes.</p>  

    <p><strong>Run Now:</strong> Immediately applies the current fan setting based on the latest temperature. Useful for testing or verifying PWM control and fan response without waiting for the next scheduled check.</p>

    <p><strong>Disk Temperature Settings:</strong>  
        Controls fan speed based on the <strong>highest temperature</strong> among the selected disks.<br>
        Below the Low Temp, the fan runs at the <strong>Min Speed %</strong>.<br>
        Above the High Temp, it ramps up to the <strong>Max Speed %</strong>.<br>
        Between these points, the speed increases smoothly and <strong>linearly</strong>.<br>
        Only the disks selected in <strong>Include Disk(s)</strong> are monitored for this fan. Multiple fans can monitor the same disk(s), and a disk can be assigned to multiple fans.<br>
        <em>Tip:</em> If you only want to monitor CPU temperature for this fan, leave all disks unchecked.
    </p>

    <p><strong>CPU Temperature Settings:</strong>  
        Works the same way as Disk Temperature Settings, but uses the CPU temperature as the source.<br>
        The <strong>CPU Sensor</strong> is automatically set to the most reliable reading; change only if necessary.<br>
    </p>

    <p><strong>Chart:</strong> Click the <strong>Chart</strong> button in a fan block to preview the fan speed curve based on your current settings.  
        Since <strong>v1.3.1</strong>, CPU temperature can also be used as a control source.  
        The chart will show separate curves for <strong>Disk</strong> and <strong>CPU</strong> rules (if both are enabled) and highlight the current operating point in real time.
    </p>

    <p style="margin: 10px 0 6px 0; font-weight: bold;">How it works:</p>

    <div class="fc-help-box">

      <p>The fan controller always calculates a target speed from each enabled temperature source, then applies the <strong>highest</strong> value to ensure sufficient cooling.</p>

      <ul style="margin: 6px 0 10px 16px;">
        <li><strong>Only Disk enabled:</strong> Uses the highest temperature among the selected disks.</li>
        <li><strong>Only CPU enabled:</strong> Uses the CPU temperature.</li>
        <li><strong>Disk + CPU enabled:</strong> Calculates fan speed from both rules and applies whichever result is higher.</li>
      </ul>

      <p style="margin: 10px 0 6px 0; font-weight: bold;">Example:</p>

      <p><strong>Disk rule:</strong> Low Temp = 30°C → 40%, High Temp = 50°C → 100%</p>
      <ul style="margin: 4px 0 8px 16px;">
        <li>30°C → 40%</li>
        <li>35°C → 55%</li>
        <li>40°C → 70%</li>
        <li>45°C → 85%</li>
        <li>50°C → 100%</li>
      </ul>

      <p><strong>CPU rule:</strong> Low Temp = 50°C → 40%, High Temp = 80°C → 100%</p>
      <ul style="margin: 4px 0 8px 16px;">
        <li>50°C → 40%</li>
        <li>60°C → 55%</li>
        <li>70°C → 70%</li>
        <li>80°C → 100%</li>
      </ul>

      <p><strong>Combined result:</strong> When both Disk and CPU control are enabled, the fan uses the <strong>higher</strong> calculated value.</p>
      <ul style="margin: 4px 0 8px 16px;">
        <li>Disk 35°C → 55%, CPU 45°C → 40% → Result = <strong>55%</strong> (Disk)</li>
        <li>Disk 32°C → 46%, CPU 60°C → 55% → Result = <strong>55%</strong> (CPU)</li>
        <li>Disk 48°C → 94%, CPU 70°C → 70% → Result = <strong>94%</strong> (Disk)</li>
      </ul>

      <p style="margin-top: 8px;"><em>Tip:</em> For CPU-based control, consider setting a <strong>shorter interval</strong> (e.g. 1&nbsp;minute) for better responsiveness.</p>
    </div>

    <p><strong>Disks:</strong> Only the selected disks will be monitored to control this fan. Multiple fans can monitor overlapping disks, and one disk can be assigned to multiple fans.</p>

    <p><strong>Apply All:</strong> After making any change in a fan block (like temperature range, assigned disks, or name), the <strong>Apply All</strong> button will light up to indicate unsaved changes. Make sure to click it to confirm and save all modifications.</p>

    <p><strong>Unlock & Reorder:</strong> Click the <span class="fa fa-lock"></span> icon in the upper-right corner to unlock fan configuration blocks. While unlocked, you can drag and drop blocks to change their order. The new layout will be saved automatically when you click the lock icon again to re-lock.</p>

    <p><strong>Identify PWM Controller:</strong> Use this tool to help locate which physical fan is linked to each PWM controller. After identification, adding a custom label makes it easier to recognize and configure later.</p>

    <p><strong>Syslog Setting:</strong> Enable or disable syslog logging for each fan individually. When enabled, changes in temperature and fan speed will be recorded in the system log. If a fan setup is already stable or updates too frequently, you can turn off its logging to reduce clutter.</p>

    <p><strong>Notes:</strong></p>
    <ul>
    <li style="color:red;">
      <strong>CPU Fan Warning:</strong> CPU temperature can change rapidly (within seconds).  
      FanCtrl&nbsp;Plus checks temperatures at most once per minute, so it cannot react as fast as BIOS or hardware fan control.  
      It is strongly recommended to leave your CPU fan under BIOS/firmware control.  
      If you still choose to control CPU fan via FanCtrl&nbsp;Plus, monitor behavior closely and proceed at your own risk.
    </li>
      <li>When setting low <strong>Min Speed %</strong>, always observe how your fan behaves. Some fans may stall or report 0 RPM if the PWM is too low.</li>
      <li>Fan response to PWM 0 varies: some fans continue spinning slowly (e.g. 100–200 RPM), while others stop completely. This is determined by hardware, not software.</li>
      <li>The temperature shown in syslog and the Dashboard tile is the <strong>highest</strong> among the selected disks, or the CPU temperature — whichever is driving the current fan speed.</li>
      <li>When the <strong>Stop</strong> button is clicked, all configured fans are set to 50% speed to prevent stalling or uncontrolled RPM spikes.</li>
      <li>If you clicked <strong>Stop</strong> before rebooting, <strong>FanCtrl Plus</strong> will auto-start after the array is started. To fully disable fan control on reboot, either <strong>uninstall the plugin</strong> or <strong>disable all fan configurations</strong>.</li>
      <li>If you uninstall <strong>FanCtrl Plus</strong>, it's recommended to reboot Unraid to restore fan control to the motherboard or BIOS defaults.</li>
    </ul>
  </blockquote>
</div>

  <!----------------- 两栏设置区块 --------------->
  <div class="fcp-block-wrap">

    <!-- 左侧：Identify PWM Controller -->
    <div class="fcp-card-480">
      <div class="title">
        <span class="fcp-title-left"><i class="fa fa-tag fcp-icon-gap"></i>Identify PWM Controller</span>
      </div>

      <!-- Help -->
      <div class="fcp-help-wrap">
        <dl class="fcp-help-dl">
           <dt class="fcp-help-dt fcp-help-cursor">
            <span class="fa fa-info-circle fcp-help-icon"></span>
            <strong>How to use</strong>
          </dt>
          <dd>&nbsp;</dd>
        </dl>
        <blockquote class="inline_help">
          <p><strong>Usage Guide:</strong></p>
          <p>
            Use Identify to help locate each physical fan, then assign a custom label so it's easier to recognize later in the 
            <strong>Fan Configuration</strong> section or in the <strong>FCP Airflow</strong> tile.
          </p>
          <ol>
            <li>Select a <strong>PWM controller</strong> from the dropdown.</li>
            <li>Choose an <strong>Identify Mode</strong>:
              <ul>
                <li><strong>Pause 30s</strong>: stops the fan for 30 seconds.</li>
                  <em>Note: some fans have a built-in minimum RPM and may keep spinning slowly instead of stopping completely.</em>
                <li><strong>Max 30s</strong>: runs the fan at full speed for 30 seconds.</li>
                <li><strong>Pulse 40s</strong>: alternates in 10-second steps (pause → max → pause → max) for 40 seconds.</li>
              </ul>
            </li>
            <li>Click <strong>Identify</strong> — locate the fan by observing which one reacts according to the chosen mode.</li>
            <li>Once identified, enter a clear label (e.g. <em>Rear Fan</em>, <em>Top Fan</em>) in the text field.</li>
            <li>Click <strong>Save Label</strong> to store the name for future reference.</li>
            <li>
              Enable the <strong>FCP Airflow</strong> tile — this works similarly to <strong>Unraid’s built-in Airflow</strong> tile,  
              and makes <strong>PWM Identify</strong> even more useful by showing <strong>all fans</strong> that have been given a <strong>custom label</strong>,  
              regardless of whether they’re configured in the <strong>Fan Configuration section</strong>.  
              Unlabeled fans will continue appear as “Fan&nbsp;X”.  
              If you enable the <strong>FCP Airflow</strong> tile, you can go to <strong>Tile Management</strong> and uncheck  
              Unraid’s default <strong>Airflow (Fan Information)</strong> tile to avoid duplicate information.
            </li>
          </ol>
          <p>
            <strong>To remove a label:</strong> select the desired PWM controller, leave the label input empty and click <strong>Save Label</strong>.
          </p>
          <p>
            <strong>Tip:</strong> If you change your hardware (e.g. adding/removing fans or BIOS updates), please re-run Identify to confirm fan mappings.
          </p>
        </blockquote>

        <!-- Form -->
        <!-- 表单容器（2 列 grid） -->
        <div class="fcp-section">
          <dl class="fcp-formgrid">
            <dt class="fcp-formgrid-label">Select PWM Controller:</dt>
            <dd><select id="identify-pwm-select" class="fcp-select fcp-w-200"></select></dd>
          </dl>
          <blockquote class="inline_help fcp-help-wide">
            Select a <strong>PWM Controller</strong> you wish to identify or edit its custom label.
          </blockquote>

          <dl class="fcp-formgrid">
            <dt class="fcp-formgrid-label">Identify Mode:</dt>
            <dd>
              <select id="identify-mode-select" class="fcp-select fcp-w-200">
                <option value="pause">Pause (30s)</option>
                <option value="max">Max Speed (30s)</option>
                <option value="pulse">Pulse (40s)</option>
              </select>
            </dd>
          </dl>
          <blockquote class="inline_help fcp-help-wide">
            Select your preferred <strong>Identify Mode</strong> to help confirm which fan is controlled by the selected PWM controller.<br>  
            <em>Pause</em> stops the fan, <em>Max</em> runs it at full speed, and <em>Pulse</em> alternates between the two.  
          </blockquote>

          <dl class="fcp-formgrid">
            <dt class="fcp-formgrid-label">Custom Label:</dt>
            <dd><input id="identify-label-input" type="text" class="fcp-input fcp-w-200" placeholder="Label (e.g. Rear Fan)"></dd>
          </dl>
          <blockquote class="inline_help fcp-help-wide">
            Enter a custom label (e.g. Rear Fan, Top Fan) to add or rename the label,  
            or leave it empty and click <strong>Save Label</strong> to clear the saved label.
          </blockquote>


          <dl class="fcp-formgrid">
            <dt class="fcp-formgrid-label"><strong>Dashboard FCP Airflow Tile:</strong></dt>
            <dd style="text-align: left;">
              <span class="switch-area">
                <div class="switch-button-background <?= $fcp_airflow_enabled ? ' checked' : '' ?>" data-for="fcp-airflow-switch">
                  <div class="switch-button-button"></div>
                </div>
                <input id="fcp-airflow-switch" class="fcp-airflow-switch" type="checkbox" <?= $fcp_airflow_enabled ? 'checked' : '' ?>>
                <span class="switch-button-label on">ENABLED</span>
                <span class="switch-button-label off">DISABLED</span>
              </span>
            </dd>
          </dl>
          <blockquote class="inline_help fcp-help-wide">
            Enable or disable the <strong>FCP Airflow</strong> tile in Dashboard.  
            Works like Unraid’s Airflow, but uses <strong>custom labels</strong> when available.
          </blockquote>
        </div>

          <!-- Actions -->
          <div class="fcp-actions">
            <button type="button" class="btn"
              onclick="identifyFan(
                $('#identify-pwm-select').val(),
                $('#identify-mode-select').val(),
                this
              )"
              title="Identify this fan by Pause, Max, or Pulse for 30 seconds.">Identify </button>

            <button type="button" class="btn"
              onclick="savePWMLabel('identify-pwm-select','identify-label-input','identify-label-tip')"
              title="Save the label, or clear it by leaving the input empty and clicking again.">Save Label</button>

            <span id="identify-label-tip" class="save-tip fcp-save-tip"></span>
          </div>
        </div>
      </div>

    <!-- 右侧：Syslog Switch -->
    <div class="fcp-card-480">
      <div class="title">
        <span class="fcp-title-left"><i class="fa fa-tag fcp-icon-gap"></i>Syslog Setting</span>
      </div>

      <!-- Help -->
      <div class="fcp-help-wrap">
        <dl class="fcp-help-dl">
          <dt class="fcp-help-dt fcp-help-cursor">
            <span class="fa fa-info-circle fcp-help-icon"></span>
            <strong>How to use</strong>
          </dt>
          <dd>&nbsp;</dd>
        </dl>
        <blockquote class="inline_help">
          <p><strong>Usage Guide:</strong></p>
          <p>Syslog output is <strong>enabled by default</strong>. When active, each fan will report actions such as:</p>
          <p class="fc-help-box">
            [HDDBay] Temp=53 → PWM=255 → RPM=2089
          </p>
          <p>This helps you track fan behavior in real time. However, if a particular fan changes frequently and generates too many log entries, you can <strong>disable logging</strong> for that fan.</p>
          <p><strong>Note:</strong> The plugin only writes to syslog when the <strong>PWM value changes by more than 5</strong> compared to the previous value — small changes are ignored to reduce log noise.</p>
        </blockquote>
      </div>

      <div id="syslog-settings-area">
        <div class="tablesorter syslog-table-wrap">
          <table class="syslog-table tablesorter">
            <thead>
              <tr>
                <th class="name">Configured Fan</th>
                <th class="switch">Syslog Switch</th>
              </tr>
            </thead>
            <tbody>
              <?php
              $custom_seen = [];
              foreach ($all_cfg as $cfg):
                if (empty($cfg['custom']) || strpos($cfg['file'], '_temp_') !== false) continue;
                if (in_array($cfg['custom'], $custom_seen, true)) continue;
                $custom_seen[] = $cfg['custom'];
                $custom_id = preg_replace('/[^a-zA-Z0-9_\-]/', '', $cfg['custom']);
                $is_on = ($cfg['syslog'] ?? "1") != "0";
              ?>
              <tr class="sortable" id="syslog-row-<?= $custom_id ?>">
                <td class="name"><?= htmlspecialchars($cfg['custom']) ?></td>
                <td class="switch">
                  <span class="switch-area">
                    <div class="switch-button-background<?= $is_on ? ' checked' : '' ?>"
                        data-for="syslog-switch-<?= htmlspecialchars($cfg['custom']) ?>">
                      <div class="switch-button-button"></div>
                    </div>
                    <input type="checkbox"
                          id="syslog-switch-<?= htmlspecialchars($cfg['custom']) ?>"
                          class="syslog-switch"
                          data-cfg="<?= htmlspecialchars($cfg['file']) ?>"
                          <?= $is_on ? 'checked' : '' ?>>
                    <span class="switch-button-label on">ON</span>
                    <span class="switch-button-label off">OFF</span>
                  </span>
                </td>
              </tr>
              <?php endforeach; ?>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</form>
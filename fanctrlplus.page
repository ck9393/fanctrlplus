Menu="Utilities"
Title="FanCtrl Plus"
Icon="fanctrlplus.png"
---

<?PHP
$plugin = "fanctrlplus";
$cfg_dir = "/boot/config/plugins/$plugin";

require_once "$docroot/plugins/$plugin/include/Common.php";

// 初始化配置
if (!is_dir($cfg_dir)) {
  mkdir($cfg_dir, 0777, true);
}

$all_cfg = [];
foreach (glob("$cfg_dir/{$plugin}_*.cfg") as $file) {
  $cfg = parse_ini_file($file);
  $cfg['file'] = basename($file);
  $all_cfg[] = $cfg;
}

if (empty($all_cfg)) {
  $temp_file = "$cfg_dir/{$plugin}_temp_0.cfg";
  if (!file_exists($temp_file)) {
    file_put_contents($temp_file, "custom=\"\"\nservice=\"1\"\ncontroller=\"\"\npwm=\"100\"\nlow=\"40\"\nhigh=\"60\"\ninterval=\"2\"\ndisks=\"\"");
  }
  $all_cfg[] = parse_ini_file($temp_file) + ['file' => basename($temp_file)];
}

$pwms = list_pwm();
$disks = list_valid_disks_by_id();
$width = 300;
?>

<div id="fanctrl-status-indicator"
  style="
    position: absolute;
    top: 31px;
    left: 150px;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #00b300
    box-shadow: 0 0 6px rgba(0, 0, 0, 0.2);
    transition: background-color 0.3s ease;
    transform: translateY(1px);
    z-index: 999;
  ">
</div>

<div id="top-fan-status" style="position: relative; margin-top: 6px; margin-left: 10px; text-align: left; z-index: 5;">
  <svg id="fan-icon" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg" style="width:60px; height:60px; display:block; margin:auto;">
    <defs>
      <linearGradient id="flameGradient" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="5%" stop-color="#FFD700"/>
        <stop offset="25%" stop-color="#FFA500"/>
        <stop offset="50%" stop-color="#FF8C00"/>
        <stop offset="75%" stop-color="#FF4500"/>
        <stop offset="100%" stop-color="#B22222"/>
      </linearGradient>
    </defs>

    <g class="rotor">
      <!-- fan blades -->
      <path fill="url(#flameGradient)" d="M176.713,229.639c5.603-16.892,16.465-31.389,30.628-41.571c-14.778-34.253-22.268-74.165-20.636-112.788 c0.217-5.095-4.279-13.455-15.648-8.54c-22.522,9.728-42.142,24.48-59.949,40.872c-17.008,15.667-20.853,40.637-7.96,56.168 C124.507,189.491,149.096,213.274,176.713,229.639z"/>
      <path fill="url(#flameGradient)" d="M290.516,179.908c22.286-29.938,53.094-56.375,87.366-74.264c4.534-2.367,9.52-10.436-0.435-17.843 c-19.674-14.634-42.268-24.253-65.352-31.47c-22.086-6.909-45.623,2.249-52.623,21.198c-11.605,31.334-19.892,64.536-20.254,96.632 C256.644,170.561,274.614,172.728,290.516,179.908z"/>
      <path fill="url(#flameGradient)" d="M412.281,169.754c-32.949,5.63-65.842,15.041-93.822,30.772c11.841,13.3,18.949,29.956,20.69,47.319 c37.064,4.324,75.362,17.798,107.983,38.524c4.316,2.738,13.799,3.029,15.232-9.302c2.847-24.354-0.108-48.724-5.403-72.334 C451.884,182.157,432.191,166.345,412.281,169.754z"/>
      <path fill="url(#flameGradient)" d="M335.287,282.361c-5.603,16.881-16.464,31.38-30.627,41.56c14.779,34.254,22.267,74.165,20.635,112.789 c-0.217,5.095,4.28,13.455,15.667,8.54c22.504-9.729,42.142-24.48,59.93-40.872c17.008-15.667,20.853-40.637,7.96-56.168 C387.511,322.508,362.904,298.717,335.287,282.361z"/>
      <path fill="url(#flameGradient)" d="M221.501,332.091c-22.267,29.93-53.075,56.367-87.348,74.264c-4.533,2.358-9.519,10.427,0.435,17.834 c19.675,14.634,42.269,24.253,65.352,31.471c22.086,6.908,45.623-2.249,52.623-21.198c11.605-31.334,19.892-64.527,20.254-96.632 C255.392,341.43,237.404,339.263,221.501,332.091z"/>
      <path fill="url(#flameGradient)" d="M172.85,264.146c-37.064-4.326-75.362-17.798-107.982-38.525c-4.316-2.738-13.8-3.028-15.233,9.303 c-2.846,24.352,0.109,48.724,5.422,72.333c5.059,22.576,24.752,38.388,44.663,34.979c32.948-5.631,65.842-15.042,93.82-30.772 C181.699,298.164,174.591,281.509,172.85,264.146z"/>
    </g>

    <<!-- fan hub -->
    <path class="hub" fill="var(--hub-color)" d="M255.991,195.503c-33.402,0-60.475,27.091-60.475,60.492c0,33.411,27.073,60.493,60.475,60.493 c33.419,0,60.51-27.082,60.51-60.493C316.502,222.594,289.411,195.503,255.991,195.503z"/>

    
    <!-- frame -->
    <path class="frame" fill="var(--frame-color)" d="M463.017,0H49.001C21.928,0,0.005,21.932,0.005,48.987v414.016C0.005,490.059,21.928,512,49.001,512h414.016 c27.055,0,48.978-21.941,48.978-48.996V48.987C511.995,21.932,490.073,0,463.017,0z M463.017,31.706 c9.539,0,17.281,7.743,17.281,17.282c0,9.547-7.742,17.28-17.281,17.28c-9.556,0-17.299-7.734-17.299-17.28 C445.718,39.448,453.461,31.706,463.017,31.706z M49.001,31.706c9.538,0,17.281,7.743,17.281,17.282 c0,9.556-7.743,17.28-17.281,17.28c-9.556,0-17.299-7.724-17.299-17.28C31.702,39.448,39.445,31.706,49.001,31.706z M48.983,480.284c-9.538,0-17.281-7.734-17.281-17.281s7.743-17.281,17.281-17.281c9.556,0,17.299,7.734,17.299,17.281 S58.539,480.284,48.983,480.284z M463.017,480.284c-9.556,0-17.299-7.734-17.299-17.281c0-9.538,7.743-17.281,17.299-17.281 c9.539,0,17.281,7.743,17.281,17.281C480.298,472.55,472.556,480.284,463.017,480.284z M255.991,489.324 c-128.855,0-233.32-104.466-233.32-233.33c0-128.854,104.466-233.319,233.32-233.319c128.873,0,233.338,104.465,233.338,233.319 C489.329,384.858,384.864,489.324,255.991,489.324z"/>
  </svg>
</div>

<style>
:root {
  --frame-color: #000000;
  --hub-color: #666666;
}
@media (prefers-color-scheme: dark) {
  :root {
    --frame-color: #ffffff;
    --hub-color: #cccccc;
  }
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to   { transform: rotate(360deg); }
}

.rotating {
  animation-name: spin;
  animation-duration: 1.2s;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  transform-origin: 50% 50%;
}

.frame, .hub {
    transition: fill 0.6s ease;
}

</style>

<script>
const DEBUG = false; // ✅ 设置是否开启调试输出

$(function() {
  updateRotor(true);  // 页面加载立即执行一次颜色注入和旋转控制
  
  function updateRotor(isRunning = true) {
    const fanIcon = document.getElementById('fan-icon');
    if (!fanIcon) return;

    const rotor = fanIcon.querySelector('.rotor');
    if (rotor) rotor.classList.toggle('rotating', isRunning);

    // 🔍 背景颜色检测 + 明暗判断（不依赖 prefers-color-scheme）
    const bg = getComputedStyle(document.body).backgroundColor;
    const match = bg.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/);
    const brightness = match ? (parseInt(match[1]) + parseInt(match[2]) + parseInt(match[3])) / 3 : 255;
    const isDark = brightness < 128;

    // ✅ 根据运行状态决定颜色
    let frameColor, hubColor;
    if (isRunning) {
      frameColor = isDark ? '#ffffff' : '#000000';
      hubColor   = isDark ? '#cccccc' : '#666666';
    } else {
      frameColor = '#cc0000';
      hubColor   = '#ff6666';
    }

    const frame = fanIcon.querySelector('.frame');
    const hub   = fanIcon.querySelector('.hub');

    if (DEBUG) {
      console.log("🌀 FanCtrlPlus:", {
        isRunning, bgColor: bg, brightness, isDark,
        frameColor, hubColor,
        frameExists: !!frame, hubExists: !!hub
      });
    }

    if (!frame || !hub) {
      console.warn("🕒 frame or hub not ready, retrying...");
      setTimeout(() => updateRotor(isRunning), 100);
      return;
    }

    frame.setAttribute('fill', frameColor);
    hub.setAttribute('fill', hubColor);
  }

window.updateFanControlStatus = function(isRunning = null) {
  if (isRunning === null) {
    fetch("/plugins/fanctrlplus/include/FanctrlLogic.php?op=status")
      .then(res => res.text())
      .then(status => updateFanControlStatus(status.trim() === "running"));
    return;
  }

  const dot = document.getElementById("fanctrl-status-indicator");
  if (dot) {
    dot.style.backgroundColor = isRunning ? '#00b300' : '#cc0000';
  }

  // ✅ 同步控制风扇是否旋转
  updateRotor(isRunning);
};

function updateStatusLightAndButton() {
  $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status'}, function(statusObj) {
    const isRunning = statusObj.status === 'running';
    updateFanControlStatus(isRunning); // ✅ 改为传值，不重复 fetch

    const btn = $('#toggle-daemon');
    btn.text(isRunning ? '⏹️ Stop' : '▶️ Start');
    btn.attr('title', isRunning ? 'Stop fan control.' : 'Start fan control.'); 
    btn.prop('disabled', false);
  }).fail(function(jqXHR, textStatus, errorThrown) {
    console.error("❌ Failed to load status:", textStatus, errorThrown);
  });
}
  function updateAllFanStatus() {
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status_all'}, function(statusMap) {
      $('.fan-block').each(function() {
        const block = $(this);
        const input = block.find('input[name^="custom["]');
        if (!input.length) return;
        const name = input.val().trim();
        const indicator = block.find('.fan-status');
        if (!indicator.length) return;
        const matchedKey = Object.keys(statusMap).find(k => k.toLowerCase() === name.toLowerCase());
        const status = matchedKey ? statusMap[matchedKey] : 'stopped';
        indicator.text(status === 'running' ? '🟢' : '🔴');
      });
    }).fail(function(jqXHR, textStatus, errorThrown) {
      console.error("❌ Failed to load status_all:", textStatus, errorThrown);
    });
  }

  updateStatusLightAndButton();
  updateAllFanStatus();

  setInterval(function() {
    updateStatusLightAndButton();
    updateAllFanStatus();
  }, 30000);

  window.toggleDaemon = function() {
    const btn = $('#toggle-daemon');
    btn.prop('disabled', true);
    const action = btn.text().includes('Stop') ? 'stop' : 'start';

    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: action}, function() {
      let tries = 0, maxTries = 10;
      const check = () => {
        $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status'}, function(data) {
          const isRunning = data.status === 'running';
          const wantRunning = action === 'start';
          if (isRunning === wantRunning || tries >= maxTries) {
            updateStatusLightAndButton();
            updateAllFanStatus();
            btn.prop('disabled', false);
          } else {
            tries++;
            setTimeout(check, 500);
          }
        });
      };
      check();
    }).fail(function(jqXHR, textStatus, errorThrown) {
      console.error("❌ Toggle daemon failed:", textStatus, errorThrown);
      btn.prop('disabled', false);
    });
  };
  
  window.pauseFan = function(pwm, btn) {
    if (!pwm || !btn) return;
  
    const $btn = $(btn);
    $btn.prop('disabled', true).text("Pausing...");
  
    $.ajax({
      url: '/plugins/fanctrlplus/include/FanctrlLogic.php',
      method: 'GET',
      data: {op: 'pause', pwm: pwm},
      timeout: 1000,
      success: function(data) {
        console.log("✅ Pause response:", data);
        let seconds = 30;
        const interval = setInterval(() => {
          if (seconds <= 0) {
            clearInterval(interval);
            $btn.text("Pause 30s").prop('disabled', false);
          } else {
            $btn.text(`Paused (${seconds}s)`);
            seconds--;
          }
        }, 1000);
      },
      error: function(xhr, status, err) {
        console.error("❌ Pause failed:", status, err);
        $btn.text("Pause 30s").prop('disabled', false);
      }
    });
  };

  window.removeFan = function(btn) {
    if (!confirm("Are you sure you want to delete this fan configuration?")) return;
    const block = $(btn).closest('.fan-block');
    const file = block.find('input.cfg-file').val();
    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', {op:'delete', file: file})
      .done(function(result) {
        block.remove();
        setTimeout(() => updateAllFanStatus(), 500);
      })
      .fail(function(jqXHR, textStatus, errorThrown) {
        alert("Failed to delete fan.");
      });
  };

  window.addFan = function() {
    const index = $('.fan-block').length;
    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', {op:'newtemp', index: index}, function(html) {
      $('#fan-area').append(html);
      updateAllFanStatus();
      $('.disk-select').last().dropdownchecklist({
        emptyText:'(None)',
        width: <?=$width?>,
        explicitClose:'...close'
      });
    }, 'html').fail(function(jqXHR, textStatus, errorThrown) {
      alert("Failed to add fan.");
    });
  };

  $('.disk-select').each(function() {
    $(this).dropdownchecklist({emptyText:'(None)', width:<?=$width?>, explicitClose:'...close'});
  });

  $('form').on('change keyup', 'input, select, textarea', function() {
    $('form').trigger('ui:changed');
  });

  $('form').on('ui:changed', function() {
    $('input[name="#apply"]').prop('disabled', false);
  });

  $(document).ready(function() {
    $('input[name="#apply"]').prop('disabled', true);
  });

  $('form').on('submit', function() {
    let valid = true;
    $('input[name^="custom["]').each(function() {
      if ($(this).val().trim() === '') {
        alert("Custom Name cannot be empty!");
        $(this).focus();
        valid = false;
        return false;
      }
    });
    return valid;
  });
});
</script>

<form method="POST" action="/update.php" target="progressFrame">
  <input type="hidden" name="#include" value="plugins/fanctrlplus/include/update.fanctrlplus.php">
  <div id="fan-area">
    <?php
    require_once "$docroot/plugins/$plugin/include/FanBlockRender.php";
    foreach ($all_cfg as $i => $cfg) {
      echo render_fan_block($cfg, $i, $pwms, $disks);
    }
    ?>
  </div>
  <div style="clear:both; margin-top:15px; text-align: left;">
    <button type="button" onclick="addFan()" title="Add a new fan controller block">➕ Add Fan</button>
    <input type="submit" name="#apply" value="Apply All" title="Save all fan configurations">
    <button type="button" id="toggle-daemon" onclick="toggleDaemon()" disabled>Loading...</button>
  </div>
</form>

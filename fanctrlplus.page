Menu="Utilities"
Title="FanCtrl Plus"
Icon="fanctrlplus.png"
---

<?PHP
$plugin = "fanctrlplus";
$cfg_dir = "/boot/config/plugins/$plugin";

// 包含公用函数
require_once "$docroot/plugins/$plugin/include/Common.php";
require_once "$docroot/plugins/$plugin/include/FanBlockRender.php";



// 初始化配置目录
if (!is_dir($cfg_dir)) {
  mkdir($cfg_dir, 0777, true);
}

// === 第一步：读取所有 fanctrlplus_*.cfg 文件 ===
$cfg_files = glob("$cfg_dir/{$plugin}_*.cfg");

if (empty($cfg_files)) {
  $temp_file = "$cfg_dir/{$plugin}_temp_0.cfg";
  if (!file_exists($temp_file)) {
    file_put_contents($temp_file, "custom=\"\"\nservice=\"1\"\ncontroller=\"\"\npwm=\"0\"\nlow=\"40\"\nhigh=\"60\"\ninterval=\"2\"\ndisks=\"\"");
  }
  // 重新加载 cfg_files
  $cfg_files = glob("$cfg_dir/{$plugin}_*.cfg");
}  

// === 第二步：从 order.cfg 读取左右栏顺序 ===
$order_left = [];
$order_right = [];

$order_file = "$cfg_dir/order.cfg";
if (is_file($order_file)) {
  $ini = parse_ini_file($order_file);
  foreach ($ini as $k => $v) {
    if (strpos($k, 'left') === 0)  $order_left[] = $v;
    if (strpos($k, 'right') === 0) $order_right[] = $v;
  }
}

// === 第三步：已出现在 order.cfg 的 cfg 列表，避免重复加载 ===
$seen = array_flip(array_merge($order_left, $order_right));

// === 第四步：准备 fan block 渲染数组（含左右栏 + 其他）===
$fan_column_left  = [];
$fan_column_right = [];
$all_cfg = [];

// 左栏渲染
foreach ($order_left as $file) {
  $path = "$cfg_dir/$file";
  if (is_file($path)) {
    $cfg = parse_ini_file($path);
    $cfg['file'] = $file;
    $fan_column_left[] = $cfg;
    $all_cfg[] = $cfg;
  }
}

// 右栏渲染
foreach ($order_right as $file) {
  $path = "$cfg_dir/$file";
  if (is_file($path)) {
    $cfg = parse_ini_file($path);
    $cfg['file'] = $file;
    $fan_column_right[] = $cfg;
    $all_cfg[] = $cfg;
  }
}

// === 第五步：加载未在 order.cfg 出现的正式 cfg（默认塞入右栏）===
foreach ($cfg_files as $path) {
  $basename = basename($path);
  if (!isset($seen[$basename]) && strpos($basename, '_temp_') === false) {
    $cfg = parse_ini_file($path);
    $cfg['file'] = $basename;
    $fan_column_right[] = $cfg;
    $all_cfg[] = $cfg;
  }
}

// === 第六步：加载所有 temp_x.cfg，默认加入右栏 ===
foreach ($cfg_files as $path) {
  $basename = basename($path);
  if (strpos($basename, '_temp_') !== false) {
    $cfg = parse_ini_file($path);
    $cfg['file'] = $basename;
    $fan_column_right[] = $cfg;
    $all_cfg[] = $cfg;
  }
}
$pwms = list_pwm();
$disks = list_valid_disks_by_id();
$width = 300;
?>

<style>
:root {
  --frame-color: #000000;
  --hub-color: #666666;
}
@media (prefers-color-scheme: dark) {
  :root {
    --frame-color: #ffffff;
    --hub-color: #cccccc;
  }
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to   { transform: rotate(360deg); }
}

.rotating {
  animation-name: spin;
  animation-duration: 1.2s;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  transform-origin: 50% 50%;
}

.frame, .hub {
    transition: fill 0.3s ease;
}

/* 控制下拉关闭状态时主框宽度 */
.ui-dropdownchecklist-selector-wrapper {
  max-width: 300px !important;
  width: 300px !important;
  box-sizing: border-box;
  padding-right: 24px;
  overflow: hidden;
  white-space: nowrap;
}

/* 控制显示文字部分不爆边 */
.ui-dropdownchecklist-text {
  display: inline-block;
  max-width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.fanctrl-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 0px;
  width: 100%;
  box-sizing: border-box;
  padding: 0 24px;
}

.fanctrl-indicator-container {
  display: flex;
  align-items: center;
  gap: 8px;
}

.fanctrl-label {
  font-size: 13px;
  font-weight: 500;
  color: #00b300;
  min-width: 50px;
  text-align: left;
  transition: color 0.3s ease;
}

.fanctrl-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: #00b300;
  opacity: 0;
  transform: scale(0.8);
  transition: opacity 1s ease, transform 1s ease;
}

.fanctrl-dot.visible {
  opacity: 1;
  transform: scale(1.3);
}

.fanctrl-stopped .fanctrl-label {
  color: #cc0000;
}

.fanctrl-stopped .fanctrl-dot {
  background-color: #cc0000 !important;
  opacity: 1 !important;
  transform: scale(1) !important;
  transition: none !important;
}

.fanctrl-sort-toggle {
  position: relative;
  text-align: right;
  font-size: 13px;
  background: transparent !important;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 0;
  box-shadow: none;
  transition: all 0.25s ease-in-out;
}
.fanctrl-sort-toggle:hover {
  transform: scale(1.1);
}

.fanctrl-sort-toggle::after {
  content: "";
  position: absolute;
  bottom: -5px;
  left: 50%;
  margin-left: -14px;
  width: 28px;
  height: 2px;
  background-color: transparent; !important;
  border-radius: 4px;
  transition: all 0.25s ease-in-out;
  pointer-events: none;
}
.fanctrl-sort-toggle:hover::after {
  background-color: var(--orange-800);
}

.drag-handle {
  display: none;
  position: absolute;
  top: 0; left: 0;
  width: 100%; height: 100%;
  z-index: 2;
  text-align: center;
  line-height: 36px;
  cursor: grab;
  font-size: 1.3em;
  transition: all 0.25s ease-in-out;
}
.fan-block.draggable .drag-handle {
  color: var(--orange-300);
}
.drag-handle:hover {
  transform: scale(1.2);
}  

.sortable-placeholder {  /* 用于Drag Fan Here */
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid #bbb;
  margin: 10px;
  border-radius: 6px;
  text-align: center;
  color: #999;
  font-size: 16px;
  background-color: #f9f9f9;
}

.fan-placeholder {   /* 用于拉动时显示Placeholder */
  border: 1px solid #bbb;
  border-radius: 6px;
  background-color: #f9f9f9;
  width: 98%;
  box-sizing: border-box;
  margin: 0 auto;
  min-height: 180px;
}

#fan-area {
  display: flex;
  gap: 16px;
  align-items: flex-start;
  padding: 8px;
}

.fan-column {
  display: flex;
  flex-direction: column;
  gap: 16px;
  flex: 1;
  min-width: 340px;
}

.fan-block {
  position: relative;
  width: 100%;
  box-sizing: border-box;
  margin: 0;
}

.fan-fieldset {
  margin: 0;
  padding: 32px 16px 12px;
  border: 1px solid #ccc;
  border-radius: 6px;
  position: relative;
}
.fan-block.draggable { cursor: move !important; }
.fan-block.ui-sortable-helper { cursor: grabbing !important; }
</style>

<div class="fanctrl-header">
  <div class="fanctrl-indicator-container" id="fanctrl-indicator" title="Fan control status">
    <span class="fanctrl-label">Running</span>
    <div class="fanctrl-dot"></div>
    <div class="fanctrl-dot"></div>
    <div class="fanctrl-dot"></div>
  </div>
  <b id="fanctrlplus-sort-toggle"
     class="system icon-u-lock green-text fanctrl-sort-toggle"
     title="Unlock to rearrange fans"></b>
</div>

<script>
const DEBUG = false; // ✅ 设置是否开启调试输出

function updatePwmDropdowns() {
  // 统计所有已选PWM（不为空）
  const selected = [];
  $('.pwm-controller').each(function() {
    const val = $(this).val();
    if (val) selected.push(val);
  });

  // 逐个select处理option
  $('.pwm-controller').each(function() {
    const self = $(this);
    const ownVal = self.val();
    self.find('option').each(function() {
      const optVal = $(this).val();
      if (optVal === ownVal || !selected.includes(optVal)) {
        $(this).prop('disabled', false);
      } else {
        $(this).prop('disabled', true);
      }
    });
  });
}  

const dropdownChecklistOptions = {
  emptyText: '(None)',
  width: 300,
  explicitClose: '...close',
  textFormatFunction: function (options) {
    const selected = options.filter(':selected');
    const count = selected.length;
    const tooltip = selected.map(function () {
      return $(this).text();
    }).get().join('\n') || '(None)';
    setTimeout(() => {
      options.closest('td').find('.ui-dropdownchecklist-text').attr('title', tooltip);
    }, 10);
    return count === 0 ? '(None)' : `Selected ${count} Disk${count > 1 ? 's' : ''}`;
  }
};

$(function() {
  // 跳动绿点动画
  let dotIndex = 0;
  const dotEls = document.querySelectorAll('#fanctrl-indicator .fanctrl-dot');
  dotEls.forEach(dot => dot.classList.remove('visible'));
  dotEls[dotIndex].classList.add('visible');
  function animateDots() {
    const container = document.getElementById('fanctrl-indicator');
    if (!container || container.classList.contains('fanctrl-stopped')) return;
    dotEls.forEach(dot => dot.classList.remove('visible'));
    dotIndex = (dotIndex + 1) % dotEls.length;
    dotEls[dotIndex].classList.add('visible');
  }
  setInterval(animateDots, 2000);

  // 初始化 SVG 风扇转动
  $('.fan-block svg[id^="fan-icon-"]').each(function() {
    const id = $(this).attr('id');
    updateRotorById(id, true);
  });

  function updateRotorById(fanId, isRunning = true) {
    const fanIcon = document.getElementById(fanId);
    if (!fanIcon) return;
    const rotor = fanIcon.querySelector('.rotor');
    if (rotor) rotor.classList.toggle('rotating', isRunning);

    const bg = getComputedStyle(document.body).backgroundColor;
    const match = bg.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/);
    const brightness = match ? (parseInt(match[1]) + parseInt(match[2]) + parseInt(match[3])) / 3 : 255;
    const isDark = brightness < 128;

    let frameColor, hubColor;
    if (isRunning) {
      frameColor = isDark ? '#ffffff' : '#000000';
      hubColor   = isDark ? '#cccccc' : '#666666';
    } else {
      frameColor = '#cc0000';
      hubColor   = '#ff6666';
    }
    const frame = fanIcon.querySelector('.frame');
    const hub   = fanIcon.querySelector('.hub');
    if (!frame || !hub) {
      setTimeout(() => updateRotorById(fanId, isRunning), 100);
      return;
    }
    frame.setAttribute('fill', frameColor);
    hub.setAttribute('fill', hubColor);
  }

  window.updateFanControlStatus = function(isRunning = null) {
    if (isRunning === null) {
      fetch("/plugins/fanctrlplus/include/FanctrlLogic.php?op=status")
        .then(res => res.text())
        .then(status => updateFanControlStatus(status.trim() === "running"));
      return;
    }
    const container = document.getElementById('fanctrl-indicator');
    const label = container.querySelector('.fanctrl-label');
    if (isRunning) {
      container.classList.remove('fanctrl-stopped');
      label.textContent = 'Running';
    } else {
      container.classList.add('fanctrl-stopped');
      label.textContent = 'Inactive';
    }
  };

  function updateStatusLightAndButton() {
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status'}, function(statusObj) {
      const isRunning = statusObj.status === 'running';
      updateFanControlStatus(isRunning);
      const btn = $('#toggle-daemon');
      btn.text(isRunning ? '⏹️ Stop' : '▶️ Start');
      btn.attr('title', isRunning ? 'Stop fan control.' : 'Start fan control.');
      btn.prop('disabled', false);
    }).fail(function(jqXHR, textStatus, errorThrown) {
    });
  }
  
  let sortableUnlocked = false;

  function updateAllFanStatus() {
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', { op: 'status_all' }, function (statusMap) {
      $('.fan-block').each(function () {
        const block = $(this);
        const cfgFile = block.data('file');
        if (!cfgFile) return;
        const matchedKey = Object.keys(statusMap).find(k => k.toLowerCase() === cfgFile.toLowerCase());
        const status = matchedKey ? statusMap[matchedKey] : 'stopped';
        const isRunning = status === 'running';

        const fanSvg = block.find('svg')[0];
        if (!fanSvg) return;

        const rotor = fanSvg.querySelector('.rotor');
        const frame = fanSvg.querySelector('.frame');
        const hub   = fanSvg.querySelector('.hub');
        if (rotor) rotor.classList.toggle('rotating', isRunning);

        const bg = getComputedStyle(document.body).backgroundColor;
        const match = bg.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/);
        const brightness = match ? (parseInt(match[1]) + parseInt(match[2]) + parseInt(match[3])) / 3 : 255;
        const isDark = brightness < 128;

        const frameColor = isRunning ? (isDark ? '#ffffff' : '#000000') : '#cc0000';
        const hubColor   = isRunning ? (isDark ? '#cccccc' : '#666666') : '#ff6666';
        if (frame) frame.setAttribute('fill', frameColor);
        if (hub)   hub.setAttribute('fill', hubColor);

        const container = fanSvg.closest('.fan-svg-container');
        if (container) {
          container.title = `Fan control: ${isRunning ? 'Active (based on disk temperature)' : 'Inactive (not automatically controlled)'}`;
        }
      });
    }).fail(function (jqXHR, textStatus, errorThrown) {
      ensureAtLeastOneFanBlock();
    });
  }
  updateStatusLightAndButton();
  updateAllFanStatus();
  setInterval(function() {
    updateStatusLightAndButton();
    updateAllFanStatus();
  }, 30000);

  window.toggleDaemon = function() {
    const btn = $('#toggle-daemon');
    btn.prop('disabled', true);
    const action = btn.text().includes('Stop') ? 'stop' : 'start';
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: action}, function() {
      let tries = 0, maxTries = 10;
      const check = () => {
        $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status'}, function(data) {
          const isRunning = data.status === 'running';
          const wantRunning = action === 'start';
          if (isRunning === wantRunning || tries >= maxTries) {
            updateStatusLightAndButton();
            updateAllFanStatus();
            btn.prop('disabled', false);
          } else {
            tries++;
            setTimeout(check, 500);
          }
        });
      };
      check();
    }).fail(function(jqXHR, textStatus, errorThrown) {
      btn.prop('disabled', false);
    });
  };

  window.pauseFan = function(pwm, btn) {
    if (!pwm || !btn) return;
    const $btn = $(btn);
    $btn.prop('disabled', true).text("Pausing...");
    $.ajax({
      url: '/plugins/fanctrlplus/include/FanctrlLogic.php',
      method: 'GET',
      data: {op: 'pause', pwm: pwm},
      timeout: 1000,
      success: function(data) {
        let seconds = 30;
        const interval = setInterval(() => {
          if (seconds <= 0) {
            clearInterval(interval);
            $btn.text("Pause 30s").prop('disabled', false);
          } else {
            $btn.text(`Paused (${seconds}s)`);
            seconds--;
          }
        }, 1000);
      },
      error: function(xhr, status, err) {
        $btn.text("Pause 30s").prop('disabled', false);
      }
    });
  };

  window.ensureAtLeastOneFanBlock = function () {
    const realBlocks = $('.fan-block').not('.sortable-placeholder, .ui-sortable-placeholder');
    if (realBlocks.length === 0) {
      addFan();
    }
  };

  window.addFan = function () {
    const index = $('.fan-block').length;

    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', { op: 'newtemp', index: index }, function (html) {
      const leftCount = $('#fan-column-left .fan-block').length;
      const rightCount = $('#fan-column-right .fan-block').length;
      const targetColumn = (leftCount <= rightCount) ? '#fan-column-left' : '#fan-column-right';

      const $html = $(html);
      $(targetColumn).append($html);

      initOriginalForBlock($html);

      $html.find('.disk-select').dropdownchecklist(dropdownChecklistOptions);

      updateAllFanStatus();
      ensureColumnDroppable();
      updatePwmDropdowns();

      setTimeout(() => {
        updateAllFanStatus();
      }, 100);
    });
  };

  $('form').on('change keyup', 'input, select, textarea', function() {
    $('form').trigger('ui:changed');
  });

  $('form').on('ui:changed', function() {
    $('input[name="#apply"]').prop('disabled', false);
  });

  function initOriginalForBlock($block) {
    const original = {
      custom: $block.find('input[name^="custom["]').val(),
      service: $block.find('select[name^="service["]').val(),
      controller: $block.find('select[name^="controller["]').val(),
      pwm: $block.find('input[name^="pwm["]').val(),
      low: $block.find('input[name^="low["]').val(),
      high: $block.find('input[name^="high["]').val(),
      interval: $block.find('input[name^="interval["]').val(),
      disks: $block.find('select[name^="disks["]').val()
    };
    $block.data('original', original);
  }

  function setApplyAllButtonState() {
    let dirty = false;

    $('.fan-block').each(function () {
      const $block = $(this);
      const original = $block.data('original');
      const current = {
        custom: $block.find('input[name^="custom["]').val(),
        service: $block.find('select[name^="service["]').val(),
        controller: $block.find('select[name^="controller["]').val(),
        pwm: $block.find('input[name^="pwm["]').val(),
        low: $block.find('input[name^="low["]').val(),
        high: $block.find('input[name^="high["]').val(),
        interval: $block.find('input[name^="interval["]').val(),
        disks: $block.find('select[name^="disks["]').val()
      };
      if (JSON.stringify(original) !== JSON.stringify(current)) {
        dirty = true;
      }
    });

    $('#apply-btn').prop('disabled', !dirty);
  }

  function ensureColumnDroppable() {
    ['#fan-column-left', '#fan-column-right'].forEach(function (selector) {
      const $col = $(selector);

      if (
        $col.children('.fan-block:not(.sortable-placeholder)').length === 0 &&
        $col.find('.sortable-placeholder').length === 0
      ) {
        $col.append(`<div class="fan-block sortable-placeholder">Drag Fan Configuration Here</div>`);
      }

      if ($col.children('.fan-block:not(.sortable-placeholder)').length > 0) {
        $col.find('.sortable-placeholder').remove();
      }
      const blockHeight = $('.fan-block:not(.sortable-placeholder):first').outerHeight();
      $('.sortable-placeholder').css('min-height', blockHeight + 'px');
    });
  }

  $('.disk-select').dropdownchecklist(dropdownChecklistOptions);

  $('.fan-block').each(function () {
    initOriginalForBlock($(this));
  });

  $('#fan-area').on('input change', 'input, select', function () {
    setApplyAllButtonState();
  });

  setApplyAllButtonState();
  ensureColumnDroppable();

  $(document).on('change', '.pwm-controller', updatePwmDropdowns);

  $(document).on('click', '#apply-btn', function (e) {
    let valid = true;
    let errorMsg = '';

    const namesSeen = new Set();
    let duplicateFound = false;

    $('.custom-name-input').each(function() {
      const block = $(this).closest('.fan-block');
      const name = $(this).val().trim();
      const intervalField = block.find('.interval-input');
      const interval = intervalField.length ? intervalField.val().trim() : '';
      const pwm = block.find('.pwm-controller').val();
      
      if (name === '') {
        valid = false;
        errorMsg = 'Custom Name is required.';
        return false;
      }
      if (!/^[A-Za-z0-9_]+$/.test(name)) {
        valid = false;
        errorMsg = 'Custom Name can only contain letters, numbers, and underscores.';
        return false;
      }

      if (!pwm || pwm === "") {
        valid = false;
        errorMsg = 'Please select a PWM controller for each fan.';
        return false;
      }  

      if (/temp_/i.test(name)) {
        valid = false;
        errorMsg = 'Custom Name cannot contain "temp_".';
        return false;
      }
      
      if (namesSeen.has(name)) {
        valid = false;
        errorMsg = `Custom Name "${name}" is already used.`;
        duplicateFound = true;
        return false;
      }

      namesSeen.add(name);

      if (!/^\d+$/.test(interval) || parseInt(interval) <= 0) {
        valid = false;
        errorMsg = 'Interval cannot be empty or 0 (recommended: 1–5 min).';
        return false;
      } 
    });

    if (!valid) {
      alert(errorMsg);
      return;
    }

    saveFanOrder();
    updatePwmDropdowns();

    $('#fan-form')[0].submit();
  }); 
  
  $(document).on('click', '.delete-btn', function () {
    const block = $(this).closest('.fan-block');
    const file = block.data('file') || block.find('input.cfg-file').val();
    const custom = block.find('input[name^="custom["]').val() || '';
    const msg = custom
      ? `Are you sure you want to delete "${custom}"?`
      : `Are you sure you want to delete this fan configuration?`;
    if (!confirm(msg)) return;

    const isTemp = file.includes('_temp_');

    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', { op: 'delete', file: file })
      .done(function () {
        block.remove();

        setTimeout(() => {
          // 保证始终至少有一个 fan block
          const realBlocks = $('.fan-block').not('.sortable-placeholder, .ui-sortable-placeholder');
          if (realBlocks.length === 0) {
            ensureAtLeastOneFanBlock();
          }
          ensureColumnDroppable();

          // 非 temp 才更新顺序
          if (!isTemp) {
            let order = [];
            $('.fan-block').each(function () {
              const val = $(this).find('input.cfg-file').val();
              if (val && !val.includes('_temp_')) order.push(val);
            });
            saveFanOrder(order);
          }

          updateAllFanStatus();
          updatePwmDropdowns();
        }, 120);
      });
  });

  $(document).on('click', '.fanctrlplus-interval-refresh', function(e) {
    const btn = e.currentTarget;
    const icon = btn.querySelector('.fa');
    btn.style.color = '#aaa';
    if (icon) icon.classList.add('fa-spin');

    const label = btn.getAttribute('data-label');
    if (!label) {
      alert("Custom Name is not configured, cannot refresh!");
      return;
    }

    btn.style.pointerEvents = 'none';

    fetch(`/plugins/fanctrlplus/include/FanctrlLogic.php?op=refresh_single&custom=${encodeURIComponent(label)}`)
      .then(res => {
        if (!res.ok) throw new Error("Request failed");
        return res.text();
      })
      .then(() => {
        setTimeout(() => {
          if (icon) icon.classList.remove('fa-spin');
          btn.style.color = 'var(--blue-800)';
          btn.style.pointerEvents = '';
        }, 1800);
      })
      .catch(err => {
        btn.style.color = 'var(--blue-800)';
        if (icon) icon.classList.remove('fa-spin');
        btn.style.pointerEvents = '';
        alert("Manual Run failed: " + err.message);
      });

    e.preventDefault();
    e.stopPropagation();
  });

    // 风扇排序逻辑
    $("#fan-column-left, #fan-column-right").sortable({
      items: ".fan-block:not(.sortable-placeholder)",
      connectWith: ".fan-column",
      opacity: 0.6,
      tolerance: "pointer",
      helper: "original",
      disabled: true,
      placeholder: "fan-placeholder",
      start: function (event, ui) {
        // 设置 placeholder 高度与原元素一致
        ui.placeholder.height(ui.item.outerHeight());
      },

      over: function (event, ui) {
        $(this).find('.sortable-placeholder').remove();
      },

      out: function (event, ui) {
        const $col = $(this);
        const realBlocks = $col.children('.fan-block:not(.sortable-placeholder)');
        if (realBlocks.length === 0 && $col.find('.sortable-placeholder').length === 0) {
          const blockHeight = $('.fan-block:not(.sortable-placeholder):first').outerHeight() || 100;
          const $placeholder = $(`<div class="fan-block sortable-placeholder">Drag Fan Configuration Here</div>`);
          $placeholder.css('min-height', blockHeight + 'px');
          $col.append($placeholder);
        }
      },
      update: function () {
        ensureColumnDroppable();
        saveFanOrder();
      }
    });

    // 切换解锁按钮逻辑
    $('#fanctrlplus-sort-toggle').on('click', function () {
      if (!sortableUnlocked) {
        if ($('.fan-block[data-file*="_temp_"]').length > 0) {
          alert("Temporary fan configurations found. Please name them or delete before unlocking.");
          return;
        }
      }

      sortableUnlocked = !sortableUnlocked;

      // 启用或禁用 sortable
      $("#fan-column-left, #fan-column-right").sortable("option", "disabled", !sortableUnlocked);

      if (sortableUnlocked) {
        // 解锁状态
        $('.fan-block').addClass('draggable');
        $('.fan-svg-container').hide();
        $('.drag-handle').show();
        $(this)
          .removeClass('icon-u-lock green-text')
          .addClass('icon-u-lock-open red-text')
          .attr('title', 'Lock sorting fan configurations');
      } else {
        // 锁回状态
        $('.fan-block').removeClass('draggable');
        $('.fan-svg-container').show();
        $('.drag-handle').hide();
        $(this)
          .removeClass('icon-u-lock-open red-text')
          .addClass('icon-u-lock green-text')
          .attr('title', 'Unlock sorting fan configurations');

        // 延迟保存排序
        setTimeout(() => {
          saveFanOrder();
        }, 300);
      }
    });

    // 保存排序的函数
    function saveFanOrder() {
      const order = {
        left: [],
        right: []
      };

      // 清空旧的隐藏 input
      $('input[name^="order_left"]').remove();
      $('input[name^="order_right"]').remove();

      $('#fan-column-left .fan-block').each(function (i) {
        const val = $(this).find('input.cfg-file').val();
        if (typeof val === 'string' && val.trim() !== '') {
          order.left.push(val.trim());
          $('#fan-form').append(`<input type="hidden" name="order_left[${i}]" value="${val.trim()}">`);
        }
      });

      $('#fan-column-right .fan-block').each(function (i) {
        const val = $(this).find('input.cfg-file').val();
        if (typeof val === 'string' && val.trim() !== '') {
          order.right.push(val.trim());
          $('#fan-form').append(`<input type="hidden" name="order_right[${i}]" value="${val.trim()}">`);
        }
      });

      // 提交 AJAX（用于立即保存至 /plugins/fanctrlplus/order.cfg）
      if (order.left.length > 0 || order.right.length > 0) {
        $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', {
          op: 'saveorder',
          order: order
        }).done(function () {
        }).fail(function (jqXHR, textStatus, errorThrown) {
        });
      }
    }
  updatePwmDropdowns();    
});
</script>

<form id="fan-form" method="POST" action="/update.php" target="progressFrame">
  <input type="hidden" name="#include" value="plugins/fanctrlplus/include/update.fanctrlplus.php">

  <div id="fan-area">
    <div id="fan-column-left" class="fan-column">
      <?php $i = 0;
      // 左栏渲染 left 排序的 fan block
      foreach ($order_left as $file) {
        $path = "$cfg_dir/$file";
        if (is_file($path)) {
          $cfg = parse_ini_file($path);
          $cfg['file'] = $file;
          $all_cfg[] = $cfg;
          echo render_fan_block($cfg, $i++, $pwms, $disks);
        }
      }
      ?>
    </div>

    <div id="fan-column-right" class="fan-column">
      <?php
      // 右栏渲染 right 排序的 fan block
      foreach ($order_right as $file) {
        $path = "$cfg_dir/$file";
        if (is_file($path)) {
          $cfg = parse_ini_file($path);
          $cfg['file'] = $file;
          $all_cfg[] = $cfg;
          echo render_fan_block($cfg, $i++, $pwms, $disks);
        }
      }
      ?>
    </div>

    <?php
    // 渲染未出现在 order.cfg 的 cfg（包括 temp_*），平均插入 fan-column 较少的一边
    $seen = array_flip(array_merge($order_left, $order_right));
    $count_left = count($order_left);
    $count_right = count($order_right);

    // 找出所有未出现在 order.cfg 的 .cfg 文件，包括 temp_*
    $unsorted_cfgs = array_filter($cfg_files, function ($path) use ($seen) {
      $basename = basename($path);
      return !isset($seen[$basename]);
    });

    // 逐个渲染，动态分配左右栏
    foreach ($unsorted_cfgs as $path) {
      $basename = basename($path);
      $cfg = parse_ini_file($path);
      $cfg['file'] = $basename;
      $all_cfg[] = $cfg;

      $html = addslashes(render_fan_block($cfg, $i, $pwms, $disks));

      if ($count_left <= $count_right) {
        $target = '#fan-column-left';
        $count_left++;
      } else {
        $target = '#fan-column-right';
        $count_right++;
      }

      echo "<script>document.querySelector('$target').insertAdjacentHTML('beforeend', `$html`);</script>";
      $i++;
    }
    ?>
  </div>

  <div style="clear:both; margin-top:15px; text-align: left;">
    <button type="button" onclick="addFan()" title="Add a new fan configuration">➕ Add Fan</button>
    <button type="button" id="apply-btn" title="Save all fan configurations">Apply All</button>
    <button type="button" id="toggle-daemon" onclick="toggleDaemon()" disabled>Loading...</button>
  </div>
</form>
Menu="Utilities"
Title="FanCtrl Plus"
Icon="fanctrlplus.png"
---

<?PHP
$plugin = "fanctrlplus";
$cfg_dir = "/boot/config/plugins/$plugin";

require_once "$docroot/plugins/$plugin/include/Common.php";

// ÂàùÂßãÂåñÈÖçÁΩÆ
if (!is_dir($cfg_dir)) {
  mkdir($cfg_dir, 0777, true);
}

$all_cfg = [];
foreach (glob("$cfg_dir/{$plugin}_*.cfg") as $file) {
  $cfg = parse_ini_file($file);
  $cfg['file'] = basename($file);
  $all_cfg[] = $cfg;
}

if (empty($all_cfg)) {
  $temp_file = "$cfg_dir/{$plugin}_temp_0.cfg";
  if (!file_exists($temp_file)) {
    file_put_contents($temp_file, "custom=\"\"\nservice=\"1\"\ncontroller=\"\"\npwm=\"100\"\nlow=\"40\"\nhigh=\"60\"\ninterval=\"2\"\ndisks=\"\"");
  }
  $all_cfg[] = parse_ini_file($temp_file) + ['file' => basename($temp_file)];
}

$pwms = list_pwm();
$disks = list_valid_disks_by_id();
$width = 300;
?>

<div id="top-fan-status" style="position: relative; margin-top: 6px; margin-left: 10px; text-align: left; z-index: 5;">
  <object id="fan-icon" type="image/svg+xml"
          data="/plugins/fanctrlplus/images/fanctrlplus.svg"
          style="width:60px; height:60px; display:block; margin:auto;"></object>
  <div id="status-value" style="font-size:13px; margin-top:4px; color: green;">Active</div>
</div>

<style>
:root {
  --frame-color: #000000;
  --hub-color: #666666;
}
@media (prefers-color-scheme: dark) {
  :root {
    --frame-color: #ffffff;
    --hub-color: #cccccc;
  }
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to   { transform: rotate(360deg); }
}
.rotating {
  animation: spin 0.8s linear infinite;
}
</style>

<script>
$(function() {
function updateRotor(isRunning = true) {
  const fanObject = document.getElementById('fan-icon');
  if (!fanObject) return;

  const applyUpdate = () => {
    const svgDoc = fanObject.contentDocument;
    if (!svgDoc) return;

    const rotor = svgDoc.querySelector('.rotor');
    if (rotor) rotor.classList.toggle('rotating', isRunning);

    const frameColor = getComputedStyle(document.documentElement).getPropertyValue('--frame-color').trim();
    const hubColor = getComputedStyle(document.documentElement).getPropertyValue('--hub-color').trim();

    const frame = svgDoc.querySelector('.frame');
    const hub = svgDoc.querySelector('.hub');

    if (frame) frame.setAttribute('fill', frameColor);
    if (hub)   hub.setAttribute('fill', hubColor);
  };

  if (fanObject.contentDocument) {
    applyUpdate();
  } else {
    fanObject.addEventListener('load', applyUpdate, { once: true });
  }
}

  // ÊèíÂÖ• <meta name="color-scheme">ÔºåÁ°Æ‰øù prefers-color-scheme ËÉΩÁîüÊïà
  const meta = document.createElement('meta');
  meta.name = 'color-scheme';
  meta.content = 'light dark';
  document.head.appendChild(meta);

// ‚úÖ Ê≠£Á°ÆÂ∞ÅË£ÖÁöÑÁâàÊú¨ÔºàÂ∑≤Â≠òÂú®‰∫é updateFanControlStatus ÂÜÖÔºâ
function updateFanControlStatus(isRunning) {
  const statusElem = document.getElementById('status-value');
  if (statusElem) {
    statusElem.textContent = isRunning ? 'Active' : 'Inactive';
    statusElem.style.color = isRunning ? 'green' : 'red';
  }

  const fanObject = document.getElementById('fan-icon');
  if (!fanObject) return;

  const updateRotor = () => {
    const svgDoc = fanObject.contentDocument;
    if (!svgDoc) return;

    // ËÆæÁΩÆÂä®ÁîªÁ±ª
    const rotor = svgDoc.querySelector('.rotor');
    if (rotor) {
      rotor.classList.toggle('rotating', isRunning);
    }

    // ËØªÂèñÁà∂È°µÈù¢ÂÆö‰πâÁöÑ CSS ÂèòÈáè
    const frameColor = getComputedStyle(document.documentElement).getPropertyValue('--frame-color').trim();
    const hubColor = getComputedStyle(document.documentElement).getPropertyValue('--hub-color').trim();

    // Ê≥®ÂÖ•È¢úËâ≤Âà∞ SVG path ÂÖÉÁ¥†
    const frame = svgDoc.querySelector('path[d*="463.017,0H49.001"]');  // Â§ñÊ°Ü
    const hub = svgDoc.querySelector('path[d*="255.991,195.503"]');     // ‰∏≠ÂøÉÂúÜ

    if (frame) frame.setAttribute('fill', frameColor);
    if (hub)   hub.setAttribute('fill', hubColor);
  };

  updateRotor(isRunning);
}
// ÁõëÂê¨ prefers-color-scheme ÁöÑÂèòÂåñÔºåÈáçÊñ∞Âà∑Êñ∞È£éÊâáÈ¢úËâ≤
window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
  const isRunning = $('#status-value').text().trim() === 'Active';
  updateFanControlStatus(isRunning);
});

  function updateStatusLightAndButton() {
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status'}, function(statusObj) {
      const isRunning = statusObj.status === 'running';
      updateFanControlStatus(isRunning);

      const btn = $('#toggle-daemon');
      btn.text(isRunning ? '‚èπÔ∏è Stop' : '‚ñ∂Ô∏è Start');
      btn.attr('title', isRunning ? 'Stop fan control.' : 'Start fan control.'); 
      btn.prop('disabled', false);
    }).fail(function(jqXHR, textStatus, errorThrown) {
      console.error("‚ùå Failed to load status:", textStatus, errorThrown);
    });
  }

  function updateAllFanStatus() {
    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status_all'}, function(statusMap) {
      $('.fan-block').each(function() {
        const block = $(this);
        const input = block.find('input[name^="custom["]');
        if (!input.length) return;
        const name = input.val().trim();
        const indicator = block.find('.fan-status');
        if (!indicator.length) return;
        const matchedKey = Object.keys(statusMap).find(k => k.toLowerCase() === name.toLowerCase());
        const status = matchedKey ? statusMap[matchedKey] : 'stopped';
        indicator.text(status === 'running' ? 'üü¢' : 'üî¥');
      });
    }).fail(function(jqXHR, textStatus, errorThrown) {
      console.error("‚ùå Failed to load status_all:", textStatus, errorThrown);
    });
  }

  updateStatusLightAndButton();
  updateAllFanStatus();

  setInterval(function() {
    updateStatusLightAndButton();
    updateAllFanStatus();
  }, 30000);

  window.toggleDaemon = function() {
    const btn = $('#toggle-daemon');
    btn.prop('disabled', true);
    const action = btn.text().includes('Stop') ? 'stop' : 'start';

    $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: action}, function() {
      let tries = 0, maxTries = 10;
      const check = () => {
        $.get('/plugins/fanctrlplus/include/FanctrlLogic.php', {op: 'status'}, function(data) {
          const isRunning = data.status === 'running';
          const wantRunning = action === 'start';
          if (isRunning === wantRunning || tries >= maxTries) {
            updateStatusLightAndButton();
            updateAllFanStatus();
            btn.prop('disabled', false);
          } else {
            tries++;
            setTimeout(check, 500);
          }
        });
      };
      check();
    }).fail(function(jqXHR, textStatus, errorThrown) {
      console.error("‚ùå Toggle daemon failed:", textStatus, errorThrown);
      btn.prop('disabled', false);
    });
  };
  
  window.pauseFan = function(pwm, btn) {
    if (!pwm || !btn) return;
  
    const $btn = $(btn);
    $btn.prop('disabled', true).text("Pausing...");
  
    $.ajax({
      url: '/plugins/fanctrlplus/include/FanctrlLogic.php',
      method: 'GET',
      data: {op: 'pause', pwm: pwm},
      timeout: 1000,
      success: function(data) {
        console.log("‚úÖ Pause response:", data);
        let seconds = 30;
        const interval = setInterval(() => {
          if (seconds <= 0) {
            clearInterval(interval);
            $btn.text("Pause 30s").prop('disabled', false);
          } else {
            $btn.text(`Paused (${seconds}s)`);
            seconds--;
          }
        }, 1000);
      },
      error: function(xhr, status, err) {
        console.error("‚ùå Pause failed:", status, err);
        $btn.text("Pause 30s").prop('disabled', false);
      }
    });
  };

  window.removeFan = function(btn) {
    if (!confirm("Are you sure you want to delete this fan configuration?")) return;
    const block = $(btn).closest('.fan-block');
    const file = block.find('input.cfg-file').val();
    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', {op:'delete', file: file})
      .done(function(result) {
        block.remove();
        setTimeout(() => updateAllFanStatus(), 500);
      })
      .fail(function(jqXHR, textStatus, errorThrown) {
        alert("Failed to delete fan.");
      });
  };

  window.addFan = function() {
    const index = $('.fan-block').length;
    $.post('/plugins/fanctrlplus/include/FanctrlLogic.php', {op:'newtemp', index: index}, function(html) {
      $('#fan-area').append(html);
      updateAllFanStatus();
      $('.disk-select').last().dropdownchecklist({
        emptyText:'(None)',
        width: <?=$width?>,
        explicitClose:'...close'
      });
    }, 'html').fail(function(jqXHR, textStatus, errorThrown) {
      alert("Failed to add fan.");
    });
  };

  $('.disk-select').each(function() {
    $(this).dropdownchecklist({emptyText:'(None)', width:<?=$width?>, explicitClose:'...close'});
  });

  $('form').on('change keyup', 'input, select, textarea', function() {
    $('form').trigger('ui:changed');
  });

  $('form').on('ui:changed', function() {
    $('input[name="#apply"]').prop('disabled', false);
  });

  $(document).ready(function() {
    $('input[name="#apply"]').prop('disabled', true);
  });

  $('form').on('submit', function() {
    let valid = true;
    $('input[name^="custom["]').each(function() {
      if ($(this).val().trim() === '') {
        alert("Custom Name cannot be empty!");
        $(this).focus();
        valid = false;
        return false;
      }
    });
    return valid;
  });
});
</script>

<form method="POST" action="/update.php" target="progressFrame">
  <input type="hidden" name="#include" value="plugins/fanctrlplus/include/update.fanctrlplus.php">
  <div id="fan-area">
    <?php
    require_once "$docroot/plugins/$plugin/include/FanBlockRender.php";
    foreach ($all_cfg as $i => $cfg) {
      echo render_fan_block($cfg, $i, $pwms, $disks);
    }
    ?>
  </div>
  <div style="clear:both; margin-top:15px; text-align: left;">
    <button type="button" onclick="addFan()" title="Add a new fan controller block">‚ûï Add Fan</button>
    <input type="submit" name="#apply" value="Apply All" title="Save all fan configurations">
    <button type="button" id="toggle-daemon" onclick="toggleDaemon()" disabled>Loading...</button>
  </div>
</form>
